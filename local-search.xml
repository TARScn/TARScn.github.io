<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>redis设计与实现读书笔记二--单机数据库</title>
    <link href="/2025/06/27/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2025/06/27/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="数据库">数据库</h2><h3 id="服务器中的数据库">服务器中的数据库</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">redisServer</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 数据库数组，保存服务器中的所有数据库</span><br>    redisDb *db;<br>    <span class="hljs-comment">// 服务器中的数据库数量</span><br>    <span class="hljs-type">int</span> dbnum;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>dbnum的值有服务器配置的database选项决定，默认为16。</p><p>客户端状态redisClient结构的db属性记录了客户端当前的目标数据库：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">redisClient</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 记录客户端当前使用的数据库</span><br>    redisDb *db;<br>    <span class="hljs-comment">// ...</span><br>&#125; redisClient;<br></code></pre></td></tr></table></figure><figure><img src="/img/redis设计与实现读书笔记二-单机数据库/redisDb.png"alt="客户端的目标数据库为1号数据库" /><figcaptionaria-hidden="true">客户端的目标数据库为1号数据库</figcaption></figure><h3 id="数据库键空间">数据库键空间</h3><p>redis是一个键值对数据库服务器，服务器中的数据器结构redisDb中的<strong>dict</strong>字典保存了数据库中的所有键值对，这个字典被称为<strong>键空间</strong>（keyspace）。</p><figure><img src="/img/redis设计与实现读书笔记二-单机数据库/keySpace.png"alt="键空间例子" /><figcaption aria-hidden="true">键空间例子</figcaption></figure><p>数据库的操作如添加、删除、更新、取值等都是键空间操作。</p>]]></content>
    
    
    <categories>
      
      <category>redis设计与实现读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis设计与实现读书笔记一--数据结构</title>
    <link href="/2025/06/22/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2025/06/22/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>这本书采用redis为2.8，现在（2025年）redis更新版本到了7.x，作者下载redis源码版本为7.0.15。但是询问GPT得到的答案为基本数据结构没有大变动，但是新版本新添加了一些数据结构。</p><h2 id="简单动态字符串sds">简单动态字符串（SDS）</h2><h3 id="sds实现">SDS实现</h3><p>书中sds结构体定义如下： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sdshdr</span> &#123;<br>    <span class="hljs-comment">// 记录 buf 数组中已使用字节的数量</span><br>    <span class="hljs-comment">// 等于SDS 所保存字符串的长度</span><br>    <span class="hljs-type">int</span> len:<br>    <span class="hljs-comment">// 记录 buf 数组中未使用字节的数量</span><br>    <span class="hljs-type">int</span> free;<br>    <span class="hljs-comment">// 字节数组,用于保存字符串</span><br>    <span class="hljs-type">char</span> buf [];<br>&#125;;<br></code></pre></td></tr></table></figure> redis（7.0.15）中的定义为：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__attribute__</span> ((__packed__)) sdshdr8 &#123;<br>    <span class="hljs-comment">// 实际使用的字节数</span><br>    <span class="hljs-type">uint8_t</span> len; <br>    <span class="hljs-comment">// 分配的总字节数，不包括头和\0结尾</span><br>    <span class="hljs-type">uint8_t</span> alloc; <span class="hljs-comment">/* excluding the header and null terminator */</span><br>    <span class="hljs-comment">// 记录SDS类型（8、16、32）</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> flags; <span class="hljs-comment">/* 3 lsb of type, 5 unused bits */</span><br>    <span class="hljs-type">char</span> buf[];<br>&#125;;<br></code></pre></td></tr></table></figure></p><h3 id="sds特性">SDS特性</h3><ul><li><strong>字符串长度快速查询</strong></li></ul><p>C语言中字符串查询长度复制度<spanclass="math inline"><em>O</em>(<em>n</em>)</span>，而SDS中查询字符串长度的复杂度为<spanclass="math inline"><em>O</em>(1)</span>，因为SDS中可以直接查字长len。记录字长也为SDS避免了后续修改字符串导致缓冲溢出的问题。</p><ul><li><strong>预分配与惰性空间</strong></li></ul><p>为了避免多次字符串修改导致的<strong>反复内存重分配</strong>，SDS使用了预分配与惰性空间的策略。具体体现为：对SDS做拼接等增加字符的操作时，SDS会多分配一些内存空间；对SDS做截断等删除字符的操作时，SDS并不会把free的空间全部回收，而是做保留。这种策略可以视为以空间换时间，提高了SDS的操作速度性能。</p><ul><li><strong>二进制安全</strong></li></ul><p>C语言的字符串默认以’\0’作为结尾标志，所以无法支持具有中间’\0’的数据，如<strong>图片、压缩包</strong>等。而SDS由于使用len记录字长，所以SDS中的数据可以包含任意个’\0’，而不用担心数据无法正常读取。</p><h2 id="链表listnode">链表(listNode)</h2><h3 id="listnodelist实现">listNode&amp;list实现</h3><ul><li><p><strong>链表节点listNode结构</strong> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">listNode</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">listNode</span> *prev;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">listNode</span> *next;<br>    <span class="hljs-type">void</span> *value;<br>&#125; listNode;<br></code></pre></td></tr></table></figure></p></li><li><p><strong>链表list结构</strong> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">list</span> &#123;<br>    listNode *head;<br>    listNode *tail;<br>    <span class="hljs-comment">// 节点值复制函数</span><br>    <span class="hljs-type">void</span> *(*dup)(<span class="hljs-type">void</span> *ptr);<br>    <span class="hljs-comment">// 节点值释放函数</span><br>    <span class="hljs-built_in">void</span> (*free)(<span class="hljs-type">void</span> *ptr);<br>    <span class="hljs-comment">// 节点值对比函数</span><br>    <span class="hljs-built_in">int</span> (*match)(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">void</span> *key);<br>    <span class="hljs-comment">// 链表所包含的节点数量</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> len;<br>&#125; list;<br></code></pre></td></tr></table></figure></p></li></ul><figure><img src="/img/redis设计与实现读书笔记一-数据结构/list.png"alt="list和listNode组成的链结构" /><figcaption aria-hidden="true">list和listNode组成的链结构</figcaption></figure><h3 id="listnodelist特性">listnode&amp;list特性</h3><ul><li><strong>双端</strong></li></ul><p>链表节点带有<strong>prev</strong>和<strong>next</strong>指针,获取某个节点的前置节点和后置节点的复杂度都是<spanclass="math inline"><em>O</em>(1)</span>。</p><ul><li><strong>表头表尾</strong></li></ul><p>链表list带有<strong>head</strong>和<strong>tail</strong>指针,获取链表的表头节点和表尾节点的复杂度都是<spanclass="math inline"><em>O</em>(1)</span>。</p><ul><li><strong>节点计数器</strong></li></ul><p>链表list带有节点计数器<strong>len</strong>,获取链表中的节点数量复杂度是<spanclass="math inline"><em>O</em>(1)</span>。</p><ul><li><strong>多态</strong></li></ul><p>链表节点中的<strong>value</strong>的指针类型是*<strong>void</strong>,所以链表可以保存各类不同类型的值。</p><h2 id="字典dictionarydict">字典（dictionary/dict）</h2><h3 id="哈希表-hash-table">哈希表 hash table</h3><p>哈希表又称散列表，是根据关键值来访问数据的一种数据结构。哈希表通过将关键键值映射为一个地址索引，加快数据的查找速度。做个比喻，学生学号和学生姓名分别对应关键键值（<strong>key</strong>）和数据（<strong>value</strong>），且存在一个数组（<strong>hashtable</strong>），而<strong>key</strong>可以通过哈希算法得到一个数字索引（假设为1），则可以把数据放在数组索引为1的储存空间。下次我们要查找value，只需要通过key即可知道数据储存位置，而且理想情况下，查找复杂度为一个常数。</p><figure><img src="/img/redis设计与实现读书笔记一-数据结构/hashTable.png"alt="哈希表" /><figcaption aria-hidden="true">哈希表</figcaption></figure><p>redis的字典本质是一个哈希表，redis中定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dict</span> &#123;<br>    <span class="hljs-comment">// 哈希表数组</span><br>    dictEntry **table;<br>    dictType *type;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> size;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sizemask;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> used;<br>    <span class="hljs-type">void</span> *privdata;<br>&#125; dict;<br></code></pre></td></tr></table></figure><p>哈希表节点： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dictEntry</span> &#123;<br>    <span class="hljs-type">void</span> *key;<br>    <span class="hljs-type">void</span> *val;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dictEntry</span> *next;<br>&#125; dictEntry;<br></code></pre></td></tr></table></figure></p><h3 id="哈希冲突">哈希冲突</h3><p>面对两个及以上key映射到同一个索引的情况，redis使用单向链表解决。</p><figure><img src="/img/redis设计与实现读书笔记一-数据结构/oneKeyOnIndex.png"alt="一个包含两个键值对的哈希表" /><figcaption aria-hidden="true">一个包含两个键值对的哈希表</figcaption></figure><figure><img src="/img/redis设计与实现读书笔记一-数据结构/twoKeyOnIndex.png"alt="使用链表解决k2和k1的冲突" /><figcaption aria-hidden="true">使用链表解决k2和k1的冲突</figcaption></figure><h2 id="整数集合intset">整数集合（intset）</h2><h3 id="intset实现">intset实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">intset</span> &#123;<br>  <span class="hljs-comment">// 编码方式</span><br>  <span class="hljs-type">uint32_t</span> encoding;<br>  <span class="hljs-comment">// 集合包含的元素数量</span><br>  <span class="hljs-type">uint32_t</span> length;<br>  <span class="hljs-comment">// 保存元素的数组</span><br>  <span class="hljs-type">int8_t</span> contents [];<br>&#125; intset;<br></code></pre></td></tr></table></figure><p>contents数组是整数集合的底层实现:整数集合的每个元素都是contents数组的一个数组项(item)，各个项在数组中按值的大小从小到大<strong>有序排列</strong>,并且数组中不包含任何重复项。</p><p>length属性记录了整数集合包含的元素数量,也即是contents数组的长度。虽然intset结构将contents属性声明为int8_t类型的数组,但实际上contents数组并不保存任何int8_t类型的值,contents数组的真正类型取决于encoding属性的值。</p><h3 id="intset特性">intset特性</h3><ul><li><strong>升级</strong></li></ul><p>每当我们要将一个新元素添加到整数集合里面,并且新元素的类型比整数集合现有所有元素的类型都要长时,整数集合需要先进行升级(upgrade),然后才能将新元素添加到整数集合里面。</p><p>升级整数集合并添加新元素共分为三步进行: 1)根据新元素的类型,扩展整数集合底层数组的空间大小,并为新元素分配空间。 2)将底层数组现有的所有元素都转换成与新元素相同的类型,并将类型转换后的元素放置到正确的位上,而且在放置元素的过程中,需要继续维持底层数组的有序性质不变。3) 将新元素添加到底层数组里面。</p><p>相较于数组，intset有自动升级和有序排列的优势，能节约空间和加快查找。</p><ul><li><strong>降级</strong></li></ul><p>intset不支持降级操作。</p><h2 id="压缩列表ziplist">压缩列表（ziplist）</h2><h3 id="ziplist实现">ziplist实现</h3><p>压缩列表是 Redis为了<strong>节约内存</strong>而开发的,是由一系列特殊编码的连续内存块组成的顺序型(sequential)数据结构。一个压缩列表可以包含任意多个节点(entry),每个节点可以保存一个<strong>字节数组</strong>或者一个<strong>整数值</strong>。</p><p>一个ziplist的构成如下图。</p><figure><img src="/img/redis设计与实现读书笔记一-数据结构/ziplistEx.png"alt="压缩列表" /><figcaption aria-hidden="true">压缩列表</figcaption></figure><figure><img src="/img/redis设计与实现读书笔记一-数据结构/ziplistNt.png"alt="各个组成说明" /><figcaption aria-hidden="true">各个组成说明</figcaption></figure><p>一个entry的构成如下图。</p><figure><img src="/img/redis设计与实现读书笔记一-数据结构/ziplistEntry.png"alt="ziplist中的节点" /><figcaption aria-hidden="true">ziplist中的节点</figcaption></figure><ul><li><strong>previous_entry_length</strong></li></ul><p>节点的 previous_entry_length属性以字节为单位,记录了压缩列表中<strong>前一个节点</strong>的长度。previousentry length 属性的长度可以是1字节或者5字节。 1)小于254个字节，previous_entry_length长度为1字节。 2)大于等于254个字节，previous_entry_length最高位字节为0xFE，剩下四位字节记录长度（最多2^32-1，4G）。</p><ul><li><strong>encoding</strong></li></ul><p>节点的encoding属性记录了节点的content属性所保存数据的类型以及长度。</p><figure><img src="/img/redis设计与实现读书笔记一-数据结构/ziplistEncode.png"alt="encoding说明" /><figcaption aria-hidden="true">encoding说明</figcaption></figure><ul><li><strong>content</strong></li></ul><p>节点的content属性负责保存节点的值,节点值可以是一个字节数组或者整数,值的类型和长度由节点的encoding属性决定。</p><h3 id="ziplist特性">ziplist特性</h3><ul><li><strong>连锁更新</strong></li></ul><p>由于单个entry中<strong>previous_entry_length</strong>有1字节和5字节两次长度，所以由某个节点<strong>previous_entry_length</strong>改变导致的其他多个节点的<strong>previous_entry_length</strong>改变的现象，被称为连锁更新。连锁更新在最坏情况下需要对压缩列表执行N次空间重分配操作,而每次空间重分配的最坏复杂度为<spanclass="math inline"><em>O</em>(<em>N</em>)</span>,所以连锁更新的最坏复杂度为<spanclass="math inline"><em>O</em>(<em>N</em><sup>2</sup>)</span>。</p><h3 id="listpack">listpack</h3><p>由于ziplist存在连锁更新等一些其他缺点，在redis3后逐步被listpack取代。</p><figure><img src="/img/redis设计与实现读书笔记一-数据结构/listpack.png"alt="listpack结构" /><figcaption aria-hidden="true">listpack结构</figcaption></figure><ul><li>totalbytes：listpack 占用的字节数，4 字节</li><li>size：listpack 节点数量，2 字节</li><li>element：节点元素</li><li>end：结尾符 0xFF 1 字节</li></ul><p>由于listpack只记录自身节点的长度，所以节点之间独立不会互相影响。</p><h3 id="quicklist">quicklist</h3><p>quicklist是listpack与双向链表的混合体，兼顾节省内存和插入效率。</p><h2 id="跳表skiplist">跳表（skiplist）</h2><p>skiplist是一种有序数据结构，通过在每个节点中维持多个指向其他节点的指针达到快速访问其他节点的目的。<strong>其支持平均<spanclass="math inline"><em>O</em>(<em>l</em><em>o</em><em>g</em>(<em>N</em>))</span>,最坏<spanclass="math inline"><em>O</em>(<em>N</em>)</span>复杂度的节点查找</strong>。</p><h3 id="skiplist实现">skiplist实现</h3><p>skiplist由<strong>zskiplist</strong>结构和<strong>zskiplistNode</strong>结构来定义。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplist</span> &#123;<br>    <span class="hljs-comment">// 指向跳表的表头和表尾节点</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplistNode</span> *header, *tail;<br>    <span class="hljs-comment">// 记录跳表的长度，即表的总节点数</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> length;<br>    <span class="hljs-comment">// 记录节点（表头除外）最大的层数</span><br>    <span class="hljs-type">int</span> level;<br>&#125; zskiplist;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplistNode</span> &#123;<br>    <span class="hljs-comment">// 成员属性（书中为 robj *obj）</span><br>    sds ele;<br>    <span class="hljs-comment">// 跳表中的节点按此分值排列</span><br>    <span class="hljs-type">double</span> score;<br>    <span class="hljs-comment">// 节点后退指针</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplistNode</span> *backward;<br>    <span class="hljs-comment">// 层数组，每个元素包含一个指向其他节点的指针</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplistLevel</span> &#123;<br>        <span class="hljs-comment">// 指向其他节点</span><br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplistNode</span> *forward;<br>        <span class="hljs-comment">// 跨度，记录两个节点之间的距离</span><br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> span;<br>    &#125; level[];<br>&#125; zskiplistNode;<br></code></pre></td></tr></table></figure><figure><img src="/img/redis设计与实现读书笔记一-数据结构/skiplist.png"alt="跳表结构" /><figcaption aria-hidden="true">跳表结构</figcaption></figure><p>各个跳表节点的最底层是一个完整的有序链表，每往上一层，都会<strong>跳过</strong>一些节点，形成“<strong>快捷通道</strong>”。</p><h2 id="对象redisobject">对象（redisObject）</h2><p>redis并没有直接使用以上提到的数据结构实现键值对数据库，而是基于其构建了一个对象系统。</p><h3 id="对象的编码和类型">对象的编码和类型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">redisObject</span> &#123;<br>    <span class="hljs-comment">// 对象类型</span><br>    <span class="hljs-type">unsigned</span> type:<span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 对象编码</span><br>    <span class="hljs-type">unsigned</span> encoding:<span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 记录对象最后一次的命令时间，用于得到空转时长</span><br>    <span class="hljs-type">unsigned</span> lru:LRU_BITS; <span class="hljs-comment">/* LRU time (relative to global lru_clock) or</span><br><span class="hljs-comment">                            * LFU data (least significant 8 bits frequency</span><br><span class="hljs-comment">                            * and most significant 16 bits access time). */</span><br>    <span class="hljs-comment">// 引用计数，用于自动回收内存</span><br>    <span class="hljs-type">int</span> refcount;<br>    <span class="hljs-comment">// 指向对象的底层实现数据结构</span><br>    <span class="hljs-type">void</span> *ptr;<br>&#125; robj;<br></code></pre></td></tr></table></figure><h4 id="类型-type">类型-type</h4><p>redis的对象有以下五种类型：</p><figure><img src="/img/redis设计与实现读书笔记一-数据结构/objectType.png"alt="对象的类型" /><figcaption aria-hidden="true">对象的类型</figcaption></figure><h4 id="编码-encoding">编码-encoding</h4><p>以下为不同类型的对象以及他们会采用的编码方式：</p><table><thead><tr><th>对象类型</th><th>编码方式</th><th>是否默认 / 特殊情况</th></tr></thead><tbody><tr><td>String</td><td>embstr / raw / int</td><td>embstr 是短字符串优化；int 为整数</td></tr><tr><td>List</td><td>quicklist</td><td>Redis 3.2+ 默认</td></tr><tr><td>Set</td><td>intset / hashtable</td><td>小整数集合 → intset</td></tr><tr><td>Hash</td><td>listpack / hashtable</td><td>小型哈希 → listpack</td></tr><tr><td>ZSet</td><td>listpack / skiplist</td><td>大型集合或范围查询 → skiplist</td></tr></tbody></table><p>通过encoding属性来设定对象的底层编码，而不为某一类型对象使用特定的数据编码，使得redis能在特定情况下设置encoding来提高该情景中的redis性能。</p><h3 id="字符串对象">字符串对象</h3><p>字符串对象底层采用的编码一般为<strong>embstr</strong>和<strong>raw</strong>，其实这两种编码的实现方式原理都是<strong>SDS</strong>。但是，embstr更适合于短字符串，raw则用于长字符串。而一个字符串对象保存的是一个整数值时，ptr类型变为long，编码方式为<strong>int</strong>。区别如下：</p><ul><li><strong>embstr</strong></li></ul><ol type="1"><li>一次性分配内存，一次性释放内存。</li><li>对象头和SDS字符串在同一块内存。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 内存结构">[ robj | sds结构 | 字符串内容 ]<br> ↑全在一块 malloc 内存中<br></code></pre></td></tr></table></figure><ul><li><strong>raw</strong></li></ul><ol type="1"><li>两次分配内存，两次释放内存。</li><li>对象头和SDS字符串分开，两个指针内存。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 内存结构">[ robj ]     -&gt;     [ sds结构 | 字符串内容 ]<br>（分开 malloc 两块内存）<br></code></pre></td></tr></table></figure><h3 id="列表对象">列表对象</h3><p>从 Redis 3.2开始，列表对象的底层统一使用<strong>quicklist</strong>编码，取代了老版本的ziplist和linkedlist。&gt; quicklist = 多个<strong>ziplist</strong>节点组成的双向链表结构 &gt;它结合了 ziplist（紧凑、连续）和 linkedlist（快速插入/删除）的优点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs quicklist">[ziplist1] &lt;-&gt; [ziplist2] &lt;-&gt; [ziplist3] ...<br></code></pre></td></tr></table></figure><h3 id="哈希对象">哈希对象</h3><p>哈希对象的编码方式为<strong>listpack</strong>或者<strong>hashtable</strong>，listpack用于小型哈希表，而hashtable则用于大型哈希表。</p><p>listpack编码实现的哈希对象原理与ziplist编码相同。</p><figure><img src="/img/redis设计与实现读书笔记一-数据结构/hashByziplist.png"alt="ziplist编码的哈希对象" /><figcaption aria-hidden="true">ziplist编码的哈希对象</figcaption></figure><p>添加顺序如下：</p><figure><img src="/img/redis设计与实现读书笔记一-数据结构/hashByziplist2.png"alt="ziplist编码的哈希对象的底层实现" /><figcaptionaria-hidden="true">ziplist编码的哈希对象的底层实现</figcaption></figure><p>hashtable编码底层使用字典实现哈希对象。</p><figure><img src="/img/redis设计与实现读书笔记一-数据结构/hashBydict.png"alt="hashtable编码的哈希对象" /><figcaption aria-hidden="true">hashtable编码的哈希对象</figcaption></figure><h3 id="集合对象">集合对象</h3><p>集合对象可以使用<strong>intset</strong>或<strong>hashtable</strong>编码实现。</p><figure><img src="/img/redis设计与实现读书笔记一-数据结构/set.png"alt="两种编码的集合对象" /><figcaption aria-hidden="true">两种编码的集合对象</figcaption></figure><h3 id="有序集合对象">有序集合对象</h3><p>有序集合对象编码可以是<strong>listpack</strong>或<strong>skiplist</strong>。</p><p>listpack编码的有序对象使用压缩列表作为底层实现，每个集合元素使用两个紧挨着的节点保存，第一个节点为元素成员，第二个节点为元素分值。<strong>压缩列表内的元素按照分值从小到大进行排列</strong>。</p><figure><img src="/img/redis设计与实现读书笔记一-数据结构/zsetByzl.png"alt="ziplist编码的有序集合对象" /><figcaption aria-hidden="true">ziplist编码的有序集合对象</figcaption></figure><figure><img src="/img/redis设计与实现读书笔记一-数据结构/zlInzset.png"alt="有序集合中的元素" /><figcaption aria-hidden="true">有序集合中的元素</figcaption></figure><p>skiplist编码的有序集合对象为了保证各个命令的操作性能不下降，所以实际使用了<strong>字典</strong>和<strong>跳表</strong>共同构建。</p><figure><img src="/img/redis设计与实现读书笔记一-数据结构/zsetBysl.png"alt="skiplist编码的有序集合对象" /><figcaption aria-hidden="true">skiplist编码的有序集合对象</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>redis设计与实现读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上传文章</title>
    <link href="/2025/06/20/%E4%B8%8A%E4%BC%A0%E6%96%87%E7%AB%A0/"/>
    <url>/2025/06/20/%E4%B8%8A%E4%BC%A0%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记录上传博客的操作步骤————第一篇文章</p></blockquote><h2 id="本地操作">本地操作</h2><p>博客网站是借用<strong>github、hexo、fluid</strong>搭建的静态网页，其中github相当于提供服务器服务（githubpages），但是只能存放静态网页，所以博客的发布需要作者从本地更新整个网站再上传到github，其他人才能看到。之所以选择这套方案，主要是作者现在作为学生米还是不够多🤣，再者该方案作为笔记系统已经足够满足我的需求了😊。</p><p>所以本地操作基于<strong>hexo</strong>创建一个本地网页，网页语言使用markdown即可。首先进入网站工作目录，终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post 文章名<br></code></pre></td></tr></table></figure><p>该操作会在<code>/source/_posts/</code>目录下生成一个md文件，在该文件中即可编写文章内容。md文件中的图片插入则使用以下命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;% asset_img xxx.png title %&#125;<br></code></pre></td></tr></table></figure> 图片放入该目录下的文章同名目录下。</p><p>写完文章后，使用以下命令更新本地的静态网站： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d<br><span class="hljs-comment"># 使用该命令可以通过https://localhost:4000访问本地网站</span><br>hexo s <br></code></pre></td></tr></table></figure></p><h2 id="上传github">上传github</h2><p>可以把文件目录直接push到github，也可以安装<strong>hexo-deployer-git</strong>自动化上传。安装命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>博客操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
