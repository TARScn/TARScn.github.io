<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AVL树和红黑树介绍</title>
    <link href="/2025/07/02/AVL%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BB%8B%E7%BB%8D/"/>
    <url>/2025/07/02/AVL%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="AVL树介绍"><a href="#AVL树介绍" class="headerlink" title="AVL树介绍"></a>AVL树介绍</h1><h2 id="什么是AVL树？"><a href="#什么是AVL树？" class="headerlink" title="什么是AVL树？"></a>什么是AVL树？</h2><p><strong>AVL树</strong>（Adelson-Velsky and Landis Tree）是一种<strong>自平衡二叉搜索树</strong>（Self-Balancing Binary Search Tree）。<br>它由苏联数学家 <strong>G.M. Adelson-Velsky</strong> 和 <strong>E.M. Landis</strong> 于1962年发明，是最早提出的自平衡二叉查找树之一。</p><p><strong>特点：</strong></p><ul><li>任何一个节点的左子树和右子树的高度差（平衡因子）最多为1。</li><li>保证树的高度始终为O(log n)，插入、删除和查找操作都可以在对数时间内完成。</li></ul><h2 id="AVL树的定义"><a href="#AVL树的定义" class="headerlink" title="AVL树的定义"></a>AVL树的定义</h2><p>对于树中的每一个节点，定义：</p><ul><li><strong>高度（Height）</strong>：从该节点到叶子节点的最长路径长度（叶子高度为0）。</li><li><strong>平衡因子（Balance Factor, BF）</strong>：<br>[<br>BF &#x3D; \text{左子树高度} - \text{右子树高度}<br>]</li><li>AVL树要求：所有节点的平衡因子必须满足：<br>[<br>BF \in {-1, 0, +1}<br>]</li></ul><h2 id="旋转示意图"><a href="#旋转示意图" class="headerlink" title="旋转示意图"></a>旋转示意图</h2><p>以下示意展示两种最常用的旋转：</p><p><strong>右旋 (Right Rotation)：</strong></p><p><img src="/img/AVL%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BB%8B%E7%BB%8D/youxuan.jpg" alt="右旋"></p><blockquote><p>左旋为右旋的镜像</p></blockquote><h2 id="AVL树的基本操作"><a href="#AVL树的基本操作" class="headerlink" title="AVL树的基本操作"></a>AVL树的基本操作</h2><h3 id="1-插入"><a href="#1-插入" class="headerlink" title="1. 插入"></a>1. 插入</h3><p>插入节点后，可能破坏树的平衡性。需要沿插入路径向上回溯，并进行**旋转（Rotation）**修复。</p><p>常见的四种情况：</p><ul><li><strong>LL型（左-左）：</strong> 对不平衡节点进行<strong>右旋</strong>。</li><li><strong>RR型（右-右）：</strong> 对不平衡节点进行<strong>左旋</strong>。</li><li><strong>LR型（左-右）：</strong> 先对左子节点进行<strong>左旋</strong>，再对不平衡节点进行<strong>右旋</strong>。</li><li><strong>RL型（右-左）：</strong> 先对右子节点进行<strong>右旋</strong>，再对不平衡节点进行<strong>左旋</strong>。</li></ul><h3 id="2-删除"><a href="#2-删除" class="headerlink" title="2. 删除"></a>2. 删除</h3><p>删除节点后也可能导致平衡性破坏，需要从删除位置往上回溯，并进行相应的旋转修复。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><a href="https://www.bilibili.com/video/BV1uuFpeKEGd?spm_id_from=333.788.videopod.sections&vd_source=1a88fb46407c6a5cc8a52eb1ea305721">AVL树插入示例</a></p><h1 id="红黑树介绍"><a href="#红黑树介绍" class="headerlink" title="红黑树介绍"></a>红黑树介绍</h1><h2 id="什么是红黑树？"><a href="#什么是红黑树？" class="headerlink" title="什么是红黑树？"></a>什么是红黑树？</h2><p><strong>红黑树（Red-Black Tree）</strong> 是一种自平衡的<strong>二叉搜索树（BST）</strong>。<br>它在插入和删除节点后，通过特定的规则进行调整，使得整棵树保持“近似平衡”，从而保证查找、插入、删除操作的时间复杂度为 <strong>O(log n)</strong>。</p><h2 id="红黑树的性质"><a href="#红黑树的性质" class="headerlink" title="红黑树的性质"></a>红黑树的性质</h2><p>红黑树每个节点上附加一个颜色属性：<strong>红色（Red）<strong>或</strong>黑色（Black）</strong>，并满足以下五条性质：</p><ol><li>每个节点要么是红色，要么是黑色。</li><li>根节点是黑色。</li><li>每个叶子节点（NIL节点）是黑色。</li><li>如果一个节点是红色的，则它的两个子节点都是黑色的（不会出现连续的红色节点）。</li><li>从任一节点到其所有后代叶子节点的路径上，<strong>黑色节点数量相同</strong>。</li></ol><p><strong>红黑树的实质是黑色节点的高度平衡</strong></p><h2 id="红黑树的基本操作"><a href="#红黑树的基本操作" class="headerlink" title="红黑树的基本操作"></a>红黑树的基本操作</h2><h3 id="1-插入（Insert）"><a href="#1-插入（Insert）" class="headerlink" title="1. 插入（Insert）"></a>1. 插入（Insert）</h3><p>插入节点初始为<strong>红色</strong>，然后根据红黑树性质进行修复：</p><ul><li>情况1：新节点的叔叔是红色 → 变色 + 向上递归</li><li>情况2：叔叔是黑色，且当前节点是“外侧” → 变色 + 旋转</li><li>情况3：叔叔是黑色，且当前节点是“内侧” → 旋转 + 变色 + 旋转</li></ul><p><strong>需要注意的是红黑树的叶子是黑色的NIL</strong><br>因为插入节点为红色，所以<strong>插入会破坏的性质只可能是性质2和性质4</strong>。</p><p>关注点在于<strong>红红冲突</strong>，然后考虑叔叔节点是红色还是黑色。</p><p>如果<strong>叔叔节点是红色</strong>则符合情况1，直接将<strong>叔叔节点和父节点染黑，祖父节点染红，接着检查祖父节点如果是根节点则染黑</strong>，递归向上。</p><p>如果<strong>叔叔节点是黑色</strong>则考虑情况2、3，其实情况3可以通过选择转换为情况2。</p><p><img src="/img/AVL%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BB%8B%E7%BB%8D/ranse.jpg" alt="叔叔节点为黑色的处理"></p><p>依次插入1，2，3，4，5，6，7，8生成的红黑树步骤如下</p><p><img src="/img/AVL%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BB%8B%E7%BB%8D/exp1.jpg" alt="例子1"></p><h3 id="2-删除（Delete）"><a href="#2-删除（Delete）" class="headerlink" title="2. 删除（Delete）"></a>2. 删除（Delete）</h3><p>删除一个节点可能破坏黑色平衡，需要使用“<strong>双重黑色</strong>”处理机制，并通过：</p><ul><li>兄弟变色</li><li>旋转</li><li>传递双黑等方式进行修复</li></ul><h3 id="3-查找（Search）"><a href="#3-查找（Search）" class="headerlink" title="3. 查找（Search）"></a>3. 查找（Search）</h3><p>和普通的二叉搜索树一样，查找过程为从根节点出发，逐层比较关键字。</p>]]></content>
    
    
    <categories>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>红黑树</tag>
      
      <tag>AVL树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis设计与实现读书笔记二--单机数据库</title>
    <link href="/2025/06/27/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2025/06/27/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="服务器中的数据库"><a href="#服务器中的数据库" class="headerlink" title="服务器中的数据库"></a>服务器中的数据库</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">redisServer</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 数据库数组，保存服务器中的所有数据库</span><br>    redisDb *db;<br>    <span class="hljs-comment">// 服务器中的数据库数量</span><br>    <span class="hljs-type">int</span> dbnum;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>dbnum的值有服务器配置的database选项决定，默认为16。</p><p>客户端状态redisClient结构的db属性记录了客户端当前的目标数据库：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">redisClient</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 记录客户端当前使用的数据库</span><br>    redisDb *db;<br>    <span class="hljs-comment">// ...</span><br>&#125; redisClient;<br></code></pre></td></tr></table></figure><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/redisDb.png" alt="客户端的目标数据库为1号数据库"></p><h3 id="数据库键空间"><a href="#数据库键空间" class="headerlink" title="数据库键空间"></a>数据库键空间</h3><p>redis是一个键值对数据库服务器，服务器中的数据器结构redisDb中的<strong>dict</strong>字典保存了数据库中的所有键值对，这个字典被称为<strong>键空间</strong>（key space）。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/keySpace.png" alt="键空间例子"></p><p>数据库的操作如添加、删除、更新、取值等都是键空间操作。</p><h3 id="键的过期机制"><a href="#键的过期机制" class="headerlink" title="键的过期机制"></a>键的过期机制</h3><p>redisDb中的<strong>expires</strong>字典保存了数据库中所有键的过期时间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">redisDb</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 数据键空间，保存键空间所有的键值对</span><br>    dict *dict;<br>    <span class="hljs-comment">// 过期字典，保存键值对的过期时间</span><br>    dict *expires;<br>    <span class="hljs-comment">// ...</span><br>&#125;redisDb;<br></code></pre></td></tr></table></figure><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/expires.png" alt="带过期字典的数据库例子"></p><ul><li>过期字典的键是一个指针，指向键空间中的某个键对象</li><li>过期字典的值是一个long long类型的整数，过期时间–一个毫秒精度的UNIX时间戳</li></ul><h3 id="过期键的删除"><a href="#过期键的删除" class="headerlink" title="过期键的删除"></a>过期键的删除</h3><p>redis过期键的删除策略为<strong>定期删除</strong>和<strong>惰性删除</strong>。</p><h4 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h4><p>定期删除策略每隔一段固定时间执行一次删除过期键操作，并通过限制删除操作执行的时长和频率来减少对CPU时间的影响。</p><p>redis周期性操作进行时，activaExpireCycle函数会在规定的时间内，分多次遍历服务器中的各个数据库，从数据库的<strong>expires</strong>字典中随机检查部分键的过期时间，并删除其中的过期键。</p><h4 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h4><p>惰性删除是指程序只会在取出键时才会对键进行过期检查，删除的目标仅限于当前操作键，避免了浪费CPU时间，但是redis是内存服务器，这一策略会造成内存浪费。</p><blockquote><p>redis同时采用了<strong>定期删除和惰性删除并结合</strong>。</p></blockquote><h2 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h2><p>redis是一个内存数据库，当服务器进程退出时，数据库状态也会消失。redis提供了RDB持久化功能，可以手动开启，也可以定期保存。RDB持久化功能生成的文件是一个经过压缩的二进制文件，可通过这个文件还原数据库状态。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/RDB.png" alt="数据库和RDB文件互相转换"></p><blockquote><p>RDB文件通过演进，老版本的redis无法兼容新版本的RDB，因为有部分数据结构不匹配。</p></blockquote><h3 id="保存与载入"><a href="#保存与载入" class="headerlink" title="保存与载入"></a>保存与载入</h3><p>当AOF持久化功能开启时，redis会优先使用AOF，因为AOF更新频率更高。<br>创建RDB文件创建RDB文件有<strong>SAVE</strong>和<strong>BGSAVE</strong>两个命令。</p><ul><li><strong>SAVE</strong><br>直接创建RDB文件，会中断服务器程序</li><li><strong>BGSAVE</strong><br>父程序会fork一个子程序，由子程序创建RDB文件，不会中断服务器程序。</li></ul><p>保存的RDB文件名字叫做<strong>dump.rdb</strong>，存放位置需要通过<strong>redis.conf</strong>设置，否则默认当前的工作目录下。<br>开启redis时，自动载入<strong>dump.rdb</strong>，载入RDB文件时，服务器程序会出于阻塞状态，直到载入工作完成。</p><p>保存条件设置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 只要满足以下三个条件中的任何一个，BGSAVE都会执行</span><br><span class="hljs-comment"># 服务器在900秒内，对数据库进行了至少1次修改</span><br>save 900 1<br><span class="hljs-comment"># 服务器在300秒内，对数据库进行了至少10次修改</span><br>save 300 10<br><span class="hljs-comment"># 服务器在60秒内，对数据库进行了至少10000次修改</span><br>save 60 10000<br></code></pre></td></tr></table></figure><h3 id="RDB文件结构"><a href="#RDB文件结构" class="headerlink" title="RDB文件结构"></a>RDB文件结构</h3><p>下图为一个完整的RDB文件结构：</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/rdbfile.png" alt="RDB文件结构"></p><p>database结构如下：</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/rdbDatabase.png" alt="database结构"></p><p>key_value_pairs结构如下：</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/key_value_pairs.png" alt="带过期时间的key_value_pairs结构"></p><p>无过期时间的结构只有TYPE、key、value。</p><h2 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h2><p>AOF持久化是通过redis服务器所执行的写命令来记录数据库状态的。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/AOF.png" alt="AOF持久化"></p><h3 id="AOF持久化的实现"><a href="#AOF持久化的实现" class="headerlink" title="AOF持久化的实现"></a>AOF持久化的实现</h3><p>AOF持久化分为命令追加、文件写入、文件同步。</p><ol><li><strong>命令追加</strong></li></ol><p>AOF持久化开启后，如果redis执行完一个写命令后，会将写命令以协议格式追加到服务器状态的<strong>aof_buf</strong>缓冲区末尾。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">redisServer</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// AOF缓冲区</span><br>    sds aof_buf;<br>    <span class="hljs-comment">// ..</span><br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>文件写入与同步</strong></li></ol><p>redis程序是一个<strong>事件循环</strong>，循环中的文件事件负责接收客户端的命令请求，以及向客户端发送命令回复，循环中还包括定时运行的函数。开启AOF持久化后，服务器在结束一次事件循环之前，程序会调用<strong>flushAppendOnlyFile</strong>函数，选择是否将aof_buf中的内容写入和保存到AOF文件里面。</p><p><strong>flushAppendOnlyFile</strong>函数的行为由服务器配置的appendfsync选项决定：</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/appendfsync.png" alt="appendfsync配置不同的持久化行为"></p><blockquote><p>写入（<strong>write</strong>）在linux中只是把数据写入到内核页缓存，并未真正落盘。只有同步到硬盘才是落盘。</p></blockquote><h3 id="AOF文件载入和数据库还原"><a href="#AOF文件载入和数据库还原" class="headerlink" title="AOF文件载入和数据库还原"></a>AOF文件载入和数据库还原</h3><p>关键点在于创建一个不联网的伪客户端，利用伪客户端写入命令。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/aofLoad.png" alt="AOF文件载入过程"></p><h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><p>为了避免记录过多写命令导致的AOF文件庞大，redis重新生成新的AOF文件替代旧AOF文件被称为<strong>AOF重写</strong>。</p><p><strong>AOF重写是通过读取当前的数据库状态来实现的</strong>，而不用分析旧AOF文件。数据库中存在什么键值对，就写入什么，所以没有一句命令多余。</p><blockquote><p>为了避免在执行命令时造成客户端输入缓冲区溢出，重写程序会检查多元素的数量，超过固定值则通过执行多条命令记录键的值。</p></blockquote><p>为了保证执行AOF重写时，服务器依然可以正常工作，redis使用<strong>AOF后台重写</strong>技术。</p><p>redis会创建一个带有当前数据库所有数据的<strong>子进程</strong>，父进程依旧正常处理客户端命令，子进程执行AOF重写程序。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/aofRewrite.png" alt="AOF重写"></p><p>要让子进程重写结束后的AOF文件与当前父进程中的数据库状态一致，redis服务器在创建子进程之前，会维护一个<strong>AOF重写缓冲区</strong>。这个缓冲区会在子进程执行AOF重写期间，记录服务器执行的所有命令，当子进程完成所有工作之后，服务器将缓冲区中的所有内容添加到重写AOF文件的末尾，最后用这个新AOF文件替代旧文件。</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>redis是一个事件驱动程序。服务器处理以下两类事件：<strong>文件事件</strong>、<strong>时间事件</strong>。</p><h3 id="文件事件"><a href="#文件事件" class="headerlink" title="文件事件"></a>文件事件</h3><p>redis使用的网络事件处理器被称为<strong>文件事件处理器</strong>。</p><p>文件事件处理器使用<strong>I&#x2F;O多路复用程序</strong>同时监听多个套接字，为套接字目前执行的不同任务<strong>关联不同的事件处理器</strong>。被监听的套接字准备<strong>执行连接应答、读取、写入、关闭等操作</strong>时，产生对应的文件事件，<strong>文件处理器会调用之前关联的事件处理器</strong>。</p><blockquote><p><strong>I&#x2F;O多路复用是指一个线程同时监听多个I&#x2F;O流</strong>，是redis支持高并发的关键<br>原理是将所有关注的套接字注册到内核，内核</p></blockquote><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/FEH.png" alt="文件事件处理器的四个部分"></p>]]></content>
    
    
    <categories>
      
      <category>redis设计与实现读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis设计与实现读书笔记一--数据结构</title>
    <link href="/2025/06/22/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2025/06/22/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>这本书采用redis为2.8，现在（2025年）redis更新版本到了7.x，作者下载redis源码版本为7.0.15。但是询问GPT得到的答案为基本数据结构没有大变动，但是新版本新添加了一些数据结构。</p><h2 id="简单动态字符串（SDS）"><a href="#简单动态字符串（SDS）" class="headerlink" title="简单动态字符串（SDS）"></a>简单动态字符串（SDS）</h2><h3 id="SDS实现"><a href="#SDS实现" class="headerlink" title="SDS实现"></a>SDS实现</h3><p>书中sds结构体定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sdshdr</span> &#123;<br>    <span class="hljs-comment">// 记录 buf 数组中已使用字节的数量</span><br>    <span class="hljs-comment">// 等于SDS 所保存字符串的长度</span><br>    <span class="hljs-type">int</span> len:<br>    <span class="hljs-comment">// 记录 buf 数组中未使用字节的数量</span><br>    <span class="hljs-type">int</span> free;<br>    <span class="hljs-comment">// 字节数组,用于保存字符串</span><br>    <span class="hljs-type">char</span> buf [];<br>&#125;;<br></code></pre></td></tr></table></figure><p>redis（7.0.15）中的定义为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__attribute__</span> ((__packed__)) sdshdr8 &#123;<br>    <span class="hljs-comment">// 实际使用的字节数</span><br>    <span class="hljs-type">uint8_t</span> len; <br>    <span class="hljs-comment">// 分配的总字节数，不包括头和\0结尾</span><br>    <span class="hljs-type">uint8_t</span> alloc; <span class="hljs-comment">/* excluding the header and null terminator */</span><br>    <span class="hljs-comment">// 记录SDS类型（8、16、32）</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> flags; <span class="hljs-comment">/* 3 lsb of type, 5 unused bits */</span><br>    <span class="hljs-type">char</span> buf[];<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="SDS特性"><a href="#SDS特性" class="headerlink" title="SDS特性"></a>SDS特性</h3><ul><li><strong>字符串长度快速查询</strong></li></ul><p>C语言中字符串查询长度复制度$O(n)$，而SDS中查询字符串长度的复杂度为$O(1)$，因为SDS中可以直接查字长len。记录字长也为SDS避免了后续修改字符串导致缓冲溢出的问题。</p><ul><li><strong>预分配与惰性空间</strong></li></ul><p>为了避免多次字符串修改导致的<strong>反复内存重分配</strong>，SDS使用了预分配与惰性空间的策略。<br>具体体现为：对SDS做拼接等增加字符的操作时，SDS会多分配一些内存空间；对SDS做截断等删除字符的操作时，SDS并不会把free的空间全部回收，而是做保留。<br>这种策略可以视为以空间换时间，提高了SDS的操作速度性能。</p><ul><li><strong>二进制安全</strong></li></ul><p>C语言的字符串默认以’\0’作为结尾标志，所以无法支持具有中间’\0’的数据，如<strong>图片、压缩包</strong>等。而SDS由于使用len记录字长，所以SDS中的数据可以包含任意个’\0’，而不用担心数据无法正常读取。</p><h2 id="链表-listNode"><a href="#链表-listNode" class="headerlink" title="链表(listNode)"></a>链表(listNode)</h2><h3 id="listNode-list实现"><a href="#listNode-list实现" class="headerlink" title="listNode&amp;list实现"></a>listNode&amp;list实现</h3><ul><li><strong>链表节点listNode结构</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">listNode</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">listNode</span> *prev;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">listNode</span> *next;<br>    <span class="hljs-type">void</span> *value;<br>&#125; listNode;<br></code></pre></td></tr></table></figure><ul><li><strong>链表list结构</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">list</span> &#123;<br>    listNode *head;<br>    listNode *tail;<br>    <span class="hljs-comment">// 节点值复制函数</span><br>    <span class="hljs-type">void</span> *(*dup)(<span class="hljs-type">void</span> *ptr);<br>    <span class="hljs-comment">// 节点值释放函数</span><br>    <span class="hljs-built_in">void</span> (*free)(<span class="hljs-type">void</span> *ptr);<br>    <span class="hljs-comment">// 节点值对比函数</span><br>    <span class="hljs-built_in">int</span> (*match)(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">void</span> *key);<br>    <span class="hljs-comment">// 链表所包含的节点数量</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> len;<br>&#125; list;<br></code></pre></td></tr></table></figure><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/list.png" alt="list和listNode组成的链结构"></p><h3 id="listnode-list特性"><a href="#listnode-list特性" class="headerlink" title="listnode&amp;list特性"></a>listnode&amp;list特性</h3><ul><li><strong>双端</strong></li></ul><p>链表节点带有<strong>prev</strong>和<strong>next</strong>指针,获取某个节点的前置节点和后置节点的复杂度都是$O(1)$。</p><ul><li><strong>表头表尾</strong></li></ul><p>链表list带有<strong>head</strong>和<strong>tail</strong>指针,获取链表的表头节点和表尾节点的复杂度都是$O(1)$。</p><ul><li><strong>节点计数器</strong></li></ul><p>链表list带有节点计数器<strong>len</strong>,获取链表中的节点数量复杂度是$O(1)$。</p><ul><li><strong>多态</strong></li></ul><p>链表节点中的<strong>value</strong>的指针类型是*<strong>void</strong>,所以链表可以保存各类不同类型的值。</p><h2 id="字典（dictionary-dict）"><a href="#字典（dictionary-dict）" class="headerlink" title="字典（dictionary&#x2F;dict）"></a>字典（dictionary&#x2F;dict）</h2><h3 id="哈希表-hash-table"><a href="#哈希表-hash-table" class="headerlink" title="哈希表 hash table"></a>哈希表 hash table</h3><p>哈希表又称散列表，是根据关键值来访问数据的一种数据结构。哈希表通过将关键键值映射为一个地址索引，加快数据的查找速度。做个比喻，学生学号和学生姓名分别对应关键键值（<strong>key</strong>）和数据（<strong>value</strong>），且存在一个数组（<strong>hash table</strong>），而<strong>key</strong>可以通过哈希算法得到一个数字索引（假设为1），则可以把数据放在数组索引为1的储存空间。下次我们要查找value，只需要通过key即可知道数据储存位置，而且理想情况下，查找复杂度为一个常数。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/hashTable.png" alt="哈希表"></p><p>redis的字典本质是一个哈希表，redis中定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dict</span> &#123;<br>    <span class="hljs-comment">// 哈希表数组</span><br>    dictEntry **table;<br>    dictType *type;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> size;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sizemask;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> used;<br>    <span class="hljs-type">void</span> *privdata;<br>&#125; dict;<br></code></pre></td></tr></table></figure><p>哈希表节点：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dictEntry</span> &#123;<br>    <span class="hljs-type">void</span> *key;<br>    <span class="hljs-type">void</span> *val;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dictEntry</span> *next;<br>&#125; dictEntry;<br></code></pre></td></tr></table></figure><h3 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h3><p>面对两个及以上key映射到同一个索引的情况，redis使用单向链表解决。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/oneKeyOnIndex.png" alt="一个包含两个键值对的哈希表"></p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/twoKeyOnIndex.png" alt="使用链表解决k2和k1的冲突"></p><h2 id="整数集合（intset）"><a href="#整数集合（intset）" class="headerlink" title="整数集合（intset）"></a>整数集合（intset）</h2><h3 id="intset实现"><a href="#intset实现" class="headerlink" title="intset实现"></a>intset实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">intset</span> &#123;<br>  <span class="hljs-comment">// 编码方式</span><br>  <span class="hljs-type">uint32_t</span> encoding;<br>  <span class="hljs-comment">// 集合包含的元素数量</span><br>  <span class="hljs-type">uint32_t</span> length;<br>  <span class="hljs-comment">// 保存元素的数组</span><br>  <span class="hljs-type">int8_t</span> contents [];<br>&#125; intset;<br></code></pre></td></tr></table></figure><p>contents数组是整数集合的底层实现:整数集合的每个元素都是contents数组的一个数组项 (item)，各个项在数组中按值的大小从小到大<strong>有序排列</strong>,并且数组中不包含任何重复项。</p><p>length属性记录了整数集合包含的元素数量,也即是contents数组的长度。虽然intset结构将contents属性声明为int8_t类型的数组,但实际上contents数组并不保存任何int8_t类型的值,contents数组的真正类型取决于encoding属性的值。</p><h3 id="intset特性"><a href="#intset特性" class="headerlink" title="intset特性"></a>intset特性</h3><ul><li><strong>升级</strong></li></ul><p>每当我们要将一个新元素添加到整数集合里面,并且新元素的类型比整数集合现有所有元素的类型都要长时,整数集合需要先进行升级(upgrade),然后才能将新元素添加到整数集合里面。</p><p>升级整数集合并添加新元素共分为三步进行:</p><ol><li>根据新元素的类型,扩展整数集合底层数组的空间大小,并为新元素分配空间。</li><li>将底层数组现有的所有元素都转换成与新元素相同的类型,并将类型转换后的元素放置到正确的位上,而且在放置元素的过程中,需要继续维持底层数组的有序性质不变。</li><li>将新元素添加到底层数组里面。</li></ol><p>相较于数组，intset有自动升级和有序排列的优势，能节约空间和加快查找。</p><ul><li><strong>降级</strong></li></ul><p>intset不支持降级操作。</p><h2 id="压缩列表（ziplist）"><a href="#压缩列表（ziplist）" class="headerlink" title="压缩列表（ziplist）"></a>压缩列表（ziplist）</h2><h3 id="ziplist实现"><a href="#ziplist实现" class="headerlink" title="ziplist实现"></a>ziplist实现</h3><p>压缩列表是 Redis 为了<strong>节约内存</strong>而开发的,是由一系列特殊编码的连续内存块组成的顺序型(sequential)数据结构。一个压缩列表可以包含任意多个节点(entry),每个节点可以保存一个<strong>字节数组</strong>或者一个<strong>整数值</strong>。</p><p>一个ziplist的构成如下图。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ziplistEx.png" alt="压缩列表"></p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ziplistNt.png" alt="各个组成说明"></p><p>一个entry的构成如下图。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ziplistEntry.png" alt="ziplist中的节点"></p><ul><li><strong>previous_entry_length</strong></li></ul><p>节点的 previous_entry_length 属性以字节为单位,记录了压缩列表中<strong>前一个节点</strong>的长度。previous entry length 属性的长度可以是1字节或者5字节。</p><ol><li>小于254个字节，previous_entry_length长度为1字节。</li><li>大于等于254个字节，previous_entry_length最高位字节为0xFE，剩下四位字节记录长度（最多2^32-1，4G）。</li></ol><ul><li><strong>encoding</strong></li></ul><p>节点的encoding属性记录了节点的content属性所保存数据的类型以及长度。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ziplistEncode.png" alt="encoding说明"></p><ul><li><strong>content</strong></li></ul><p>节点的content属性负责保存节点的值,节点值可以是一个字节数组或者整数,值的类型和长度由节点的encoding属性决定。</p><h3 id="ziplist特性"><a href="#ziplist特性" class="headerlink" title="ziplist特性"></a>ziplist特性</h3><ul><li><strong>连锁更新</strong></li></ul><p>由于单个entry中<strong>previous_entry_length</strong>有1字节和5字节两次长度，所以由某个节点<strong>previous_entry_length</strong>改变导致的其他多个节点的<strong>previous_entry_length</strong>改变的现象，被称为连锁更新。<br>连锁更新在最坏情况下需要对压缩列表执行N次空间重分配操作,而每次空间重分配的最坏复杂度为$O(N)$,所以连锁更新的最坏复杂度为$O(N^2)$。</p><h3 id="listpack"><a href="#listpack" class="headerlink" title="listpack"></a>listpack</h3><p>由于ziplist存在连锁更新等一些其他缺点，在redis 3后逐步被listpack取代。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/listpack.png" alt="listpack结构"></p><ul><li>totalbytes：listpack 占用的字节数，4 字节</li><li>size：listpack 节点数量，2 字节</li><li>element：节点元素</li><li>end：结尾符 0xFF 1 字节</li></ul><p>由于listpack只记录自身节点的长度，所以节点之间独立不会互相影响。</p><h3 id="quicklist"><a href="#quicklist" class="headerlink" title="quicklist"></a>quicklist</h3><p>quicklist是listpack与双向链表的混合体，兼顾节省内存和插入效率。</p><h2 id="跳表（skiplist）"><a href="#跳表（skiplist）" class="headerlink" title="跳表（skiplist）"></a>跳表（skiplist）</h2><p>skiplist是一种有序数据结构，通过在每个节点中维持多个指向其他节点的指针达到快速访问其他节点的目的。<strong>其支持平均$O(log(N))$,最坏$O(N)$复杂度的节点查找</strong>。</p><h3 id="skiplist实现"><a href="#skiplist实现" class="headerlink" title="skiplist实现"></a>skiplist实现</h3><p>skiplist由<strong>zskiplist</strong>结构和<strong>zskiplistNode</strong>结构来定义。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplist</span> &#123;<br>    <span class="hljs-comment">// 指向跳表的表头和表尾节点</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplistNode</span> *header, *tail;<br>    <span class="hljs-comment">// 记录跳表的长度，即表的总节点数</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> length;<br>    <span class="hljs-comment">// 记录节点（表头除外）最大的层数</span><br>    <span class="hljs-type">int</span> level;<br>&#125; zskiplist;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplistNode</span> &#123;<br>    <span class="hljs-comment">// 成员属性（书中为 robj *obj）</span><br>    sds ele;<br>    <span class="hljs-comment">// 跳表中的节点按此分值排列</span><br>    <span class="hljs-type">double</span> score;<br>    <span class="hljs-comment">// 节点后退指针</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplistNode</span> *backward;<br>    <span class="hljs-comment">// 层数组，每个元素包含一个指向其他节点的指针</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplistLevel</span> &#123;<br>        <span class="hljs-comment">// 指向其他节点</span><br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplistNode</span> *forward;<br>        <span class="hljs-comment">// 跨度，记录两个节点之间的距离</span><br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> span;<br>    &#125; level[];<br>&#125; zskiplistNode;<br></code></pre></td></tr></table></figure><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/skiplist.png" alt="跳表结构"></p><p>各个跳表节点的最底层是一个完整的有序链表，每往上一层，都会<strong>跳过</strong>一些节点，形成“<strong>快捷通道</strong>”。</p><h2 id="对象（redisObject）"><a href="#对象（redisObject）" class="headerlink" title="对象（redisObject）"></a>对象（redisObject）</h2><p>redis并没有直接使用以上提到的数据结构实现键值对数据库，而是基于其构建了一个对象系统。</p><h3 id="对象的编码和类型"><a href="#对象的编码和类型" class="headerlink" title="对象的编码和类型"></a>对象的编码和类型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">redisObject</span> &#123;<br>    <span class="hljs-comment">// 对象类型</span><br>    <span class="hljs-type">unsigned</span> type:<span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 对象编码</span><br>    <span class="hljs-type">unsigned</span> encoding:<span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 记录对象最后一次的命令时间，用于得到空转时长</span><br>    <span class="hljs-type">unsigned</span> lru:LRU_BITS; <span class="hljs-comment">/* LRU time (relative to global lru_clock) or</span><br><span class="hljs-comment">                            * LFU data (least significant 8 bits frequency</span><br><span class="hljs-comment">                            * and most significant 16 bits access time). */</span><br>    <span class="hljs-comment">// 引用计数，用于自动回收内存</span><br>    <span class="hljs-type">int</span> refcount;<br>    <span class="hljs-comment">// 指向对象的底层实现数据结构</span><br>    <span class="hljs-type">void</span> *ptr;<br>&#125; robj;<br></code></pre></td></tr></table></figure><h4 id="类型-type"><a href="#类型-type" class="headerlink" title="类型-type"></a>类型-type</h4><p>redis的对象有以下五种类型：</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/objectType.png" alt="对象的类型"></p><h4 id="编码-encoding"><a href="#编码-encoding" class="headerlink" title="编码-encoding"></a>编码-encoding</h4><p>以下为不同类型的对象以及他们会采用的编码方式：</p><table><thead><tr><th>对象类型</th><th>编码方式</th><th>是否默认 &#x2F; 特殊情况</th></tr></thead><tbody><tr><td>String</td><td>embstr &#x2F; raw &#x2F; int</td><td>embstr 是短字符串优化；int 为整数</td></tr><tr><td>List</td><td>quicklist</td><td>Redis 3.2+ 默认</td></tr><tr><td>Set</td><td>intset &#x2F; hashtable</td><td>小整数集合 → intset</td></tr><tr><td>Hash</td><td>listpack &#x2F; hashtable</td><td>小型哈希 → listpack</td></tr><tr><td>ZSet</td><td>listpack &#x2F; skiplist</td><td>大型集合或范围查询 → skiplist</td></tr></tbody></table><p>通过encoding属性来设定对象的底层编码，而不为某一类型对象使用特定的数据编码，使得redis能在特定情况下设置encoding来提高该情景中的redis性能。</p><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><p>字符串对象底层采用的编码一般为<strong>embstr</strong>和<strong>raw</strong>，其实这两种编码的实现方式原理都是<strong>SDS</strong>。但是，embstr更适合于短字符串，raw则用于长字符串。而一个字符串对象保存的是一个整数值时，ptr类型变为long，编码方式为<strong>int</strong>。<br>区别如下：</p><ul><li><strong>embstr</strong></li></ul><ol><li>一次性分配内存，一次性释放内存。</li><li>对象头和SDS字符串在同一块内存。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 内存结构">[ robj | sds结构 | 字符串内容 ]<br> ↑全在一块 malloc 内存中<br></code></pre></td></tr></table></figure><ul><li><strong>raw</strong></li></ul><ol><li>两次分配内存，两次释放内存。</li><li>对象头和SDS字符串分开，两个指针内存。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 内存结构">[ robj ]     -&gt;     [ sds结构 | 字符串内容 ]<br>（分开 malloc 两块内存）<br></code></pre></td></tr></table></figure><h3 id="列表对象"><a href="#列表对象" class="headerlink" title="列表对象"></a>列表对象</h3><p>从 Redis 3.2 开始，列表对象的底层统一使用<strong>quicklist</strong>编码，取代了老版本的ziplist和linkedlist。</p><blockquote><p>quicklist &#x3D; 多个<strong>ziplist</strong>节点组成的双向链表结构</p></blockquote><p>它结合了 ziplist（紧凑、连续）和 linkedlist（快速插入&#x2F;删除）的优点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs quicklist">[ziplist1] &lt;-&gt; [ziplist2] &lt;-&gt; [ziplist3] ...<br></code></pre></td></tr></table></figure><h3 id="哈希对象"><a href="#哈希对象" class="headerlink" title="哈希对象"></a>哈希对象</h3><p>哈希对象的编码方式为<strong>listpack</strong>或者<strong>hashtable</strong>，listpack用于小型哈希表，而hashtable则用于大型哈希表。</p><p>listpack编码实现的哈希对象原理与ziplist编码相同。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/hashByziplist.png" alt="ziplist编码的哈希对象"></p><p>添加顺序如下：</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/hashByziplist2.png" alt="ziplist编码的哈希对象的底层实现"></p><p>hashtable编码底层使用字典实现哈希对象。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/hashBydict.png" alt="hashtable编码的哈希对象"></p><h3 id="集合对象"><a href="#集合对象" class="headerlink" title="集合对象"></a>集合对象</h3><p>集合对象可以使用<strong>intset</strong>或<strong>hashtable</strong>编码实现。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/set.png" alt="两种编码的集合对象"></p><h3 id="有序集合对象"><a href="#有序集合对象" class="headerlink" title="有序集合对象"></a>有序集合对象</h3><p>有序集合对象编码可以是<strong>listpack</strong>或<strong>skiplist</strong>。</p><p>listpack编码的有序对象使用压缩列表作为底层实现，每个集合元素使用两个紧挨着的节点保存，第一个节点为元素成员，第二个节点为元素分值。<strong>压缩列表内的元素按照分值从小到大进行排列</strong>。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/zsetByzl.png" alt="ziplist编码的有序集合对象"></p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/zlInzset.png" alt="有序集合中的元素"></p><p>skiplist编码的有序集合对象为了保证各个命令的操作性能不下降，所以实际使用了<strong>字典</strong>和<strong>跳表</strong>共同构建。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/zsetBysl.png" alt="skiplist编码的有序集合对象"></p>]]></content>
    
    
    <categories>
      
      <category>redis设计与实现读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上传文章</title>
    <link href="/2025/06/20/%E4%B8%8A%E4%BC%A0%E6%96%87%E7%AB%A0/"/>
    <url>/2025/06/20/%E4%B8%8A%E4%BC%A0%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记录上传博客的操作步骤————第一篇文章</p></blockquote><h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2><p>博客网站是借用<strong>github、hexo、fluid</strong>搭建的静态网页，其中github相当于提供服务器服务（github pages），但是只能存放静态网页，所以博客的发布需要作者从本地更新整个网站再上传到github，其他人才能看到。之所以选择这套方案，主要是作者现在作为学生米还是不够多🤣，再者该方案作为笔记系统已经足够满足我的需求了😊。</p><p>所以本地操作基于<strong>hexo</strong>创建一个本地网页，网页语言使用markdown即可。首先进入网站工作目录，终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post 文章名<br></code></pre></td></tr></table></figure><p>该操作会在<code>/source/_posts/</code>目录下生成一个md文件，在该文件中即可编写文章内容。md文件中的图片插入则使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;% asset_img xxx.png title %&#125;<br></code></pre></td></tr></table></figure><p>图片放入该目录下的文章同名目录下。</p><p>写完文章后，使用以下命令更新本地的静态网站：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d<br><span class="hljs-comment"># 使用该命令可以通过https://localhost:4000访问本地网站</span><br>hexo s <br></code></pre></td></tr></table></figure><h2 id="上传github"><a href="#上传github" class="headerlink" title="上传github"></a>上传github</h2><p>可以把文件目录直接push到github，也可以安装<strong>hexo-deployer-git</strong>自动化上传。安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
