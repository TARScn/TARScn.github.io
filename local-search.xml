<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CMU15-445(Bustub):project1实现笔记</title>
    <link href="/2025/09/04/CMU15-445-Bustub-project1%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/09/04/CMU15-445-Bustub-project1%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="数据库储存原理"><a href="#数据库储存原理" class="headerlink" title="数据库储存原理"></a>数据库储存原理</h2><p>如今储存设备可以大致分为<strong>易失性设备</strong>和<strong>非易失性设备</strong>：</p><ol><li>易失性设备(Volatile Devices)​​:</li></ol><ul><li>断电后数据丢失</li><li>支持快速随机访问，字节寻址</li><li>在本课程中统称为”内存”</li></ul><ol start="2"><li>非易失性设备(Non-Volatile Devices)​​:</li></ol><ul><li>断电后数据保留</li><li>块&#x2F;页寻址(通常4KB)</li><li>更适合顺序访问</li><li>在本课程中统称为”磁盘”(包括SSD和HDD)</li></ul><p>本课程实现的Bustub数据库是<strong>磁盘导向的DBMS</strong>：</p><ul><li>数据库全部存储在磁盘上</li><li>数据组织为页(page)</li><li>通过缓冲池(buffer pool)管理数据在磁盘和内存间的移动</li><li>执行引擎通过缓冲池获取特定页进行操作</li></ul><p><img src="/img/CMU15-445-Bustub-project1%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/interactionProcessesDBMS.png" alt="关键交互流程（DBMS视角）"></p><h3 id="日志结构存储"><a href="#日志结构存储" class="headerlink" title="日志结构存储"></a>日志结构存储</h3><p>日志结构合并树(Log-Structured Merge-Tree,<strong>LSM-Tree</strong>)是一种高性能的磁盘存储数据结构，专门为​​写入密集型​​工作负载设计，广泛应用于现代数据库系统如LevelDB、RocksDB、Cassandra等。<br>它的设计理念是<strong>将随机写入转化为顺序写入</strong>，以提高写入性能。因为在传统的磁盘存储中，顺序写入的速度要比随机写入快得多。</p><h4 id="结构组成"><a href="#结构组成" class="headerlink" title="结构组成"></a>结构组成</h4><ul><li><strong>MemTable（内存表）</strong>：这是 LSM - Tree 存储结构的最上层。新的数据首先会被写入到 MemTable 中。MemTable 通常是一个基于内存的有序数据结构，比如红黑树或者跳表。</li><li><strong>SSTables（Sorted String Tables）</strong>：当 MemTable 达到一定的大小后，其数据会被刷新（flush）到磁盘上的 SSTables。SSTables 是存储在磁盘中的有序键值对集合，其内部的数据是按照键（key）进行排序的。SSTables 并不是单个的大文件，而是一系列的文件，每个文件都有自己的范围（key 的区间）。例如，在一个存储用户信息的数据库中，可能会有一个 SSTable 负责存储姓名以 A - F 开头的用户信息，另一个 SSTable 存储姓名以 G - L 开头的用户信息等。</li></ul><p><img src="/img/CMU15-445-Bustub-project1%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/LogStructuredStorage.png" alt="日志结构存储"></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>不直接存储元组，而是存储变更日志记录</li><li>先在内存数据结构(MemTable)中应用变更</li><li>然后顺序写入磁盘(SSTable)</li><li>记录包含：元组唯一ID、操作类型(PUT&#x2F;DELETE)、元组内容(对于PUT)</li></ul><h3 id="索引组织存储"><a href="#索引组织存储" class="headerlink" title="索引组织存储"></a>索引组织存储</h3><p>索引组织存储(IOS, Index-Organized Storage)是一种将​<strong>​表数据直接存储在索引结构​</strong>​中的数据库存储方式，与传统堆文件(Heap File)存储形成鲜明对比。常用索引结构为<strong>B+树</strong>。</p><p><img src="/img/CMU15-445-Bustub-project1%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/IOS.png" alt="与传统堆文件对比"></p><h2 id="Bustub的缓存池结构"><a href="#Bustub的缓存池结构" class="headerlink" title="Bustub的缓存池结构"></a>Bustub的缓存池结构</h2><p><img src="/img/CMU15-445-Bustub-project1%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/bpm.png" alt="缓冲池管理"></p><ul><li><strong>page对象</strong>：内存中的页表示，包含脏位标记</li><li><strong>​​LRU-K替换器</strong>：改进的LRU算法，考虑最近K次访问历史，用于刷新不常用的内存页</li></ul><h2 id="Project-1"><a href="#Project-1" class="headerlink" title="Project #1"></a>Project #1</h2><p>实验一是要实现一个缓存池管理器，主要包括三个程序，分别是：</p><ul><li>LRU-K更新策略</li><li>磁盘管理</li><li>缓存池管理</li></ul><p><a href="https://15445.courses.cs.cmu.edu/fall2024/project1/">要完成的任务详情</a></p>]]></content>
    
    
    <categories>
      
      <category>CMU15-445</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>Bustub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git使用</title>
    <link href="/2025/08/07/git%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/08/07/git%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是git"><a href="#什么是git" class="headerlink" title="什么是git"></a>什么是git</h2><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p><p><img src="/img/git%E4%BD%BF%E7%94%A8/git%E5%8E%9F%E7%90%86.png" alt="git原理"></p><h2 id="git的基本使用操作"><a href="#git的基本使用操作" class="headerlink" title="git的基本使用操作"></a>git的基本使用操作</h2><h3 id="添加和提交"><a href="#添加和提交" class="headerlink" title="添加和提交"></a>添加和提交</h3><p>你的本地仓库由 git 维护的三棵“树”组成。第一个是你的<strong>工作目录</strong>，它持有实际文件；第二个是<strong>暂存区（Index）</strong>，它像个缓存区域，临时保存你的改动；最后是<strong>HEAD</strong>，它指向你最后一次提交的结果。</p><p><img src="/img/git%E4%BD%BF%E7%94%A8/%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png" alt="本地仓库"></p><p>你可以提出更改（把它们添加到暂存区），使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add &lt;filename&gt;<br>git add .<br></code></pre></td></tr></table></figure><p>这是 git 基本工作流程的第一步；<br>使用如下命令以实际提交改动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;提交信息&quot;</span><br></code></pre></td></tr></table></figure><p>现在，你的改动已经提交到了HEAD，但是还没到你的远端仓库。</p><h3 id="推送改动"><a href="#推送改动" class="headerlink" title="推送改动"></a>推送改动</h3><p>执行如下命令以将这些改动提交到远端仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin master<br></code></pre></td></tr></table></figure><p>可以把 master 换成你想要推送的任何分支。<br>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin &lt;server&gt;<br></code></pre></td></tr></table></figure><p>如此你就能够将你的改动推送到所添加的服务器上去了。</p><ul><li><p>server：<br>HTTPS：<a href="https://github.com/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D.git">https://github.com/用户名/仓库名.git</a><br>SSH：<a href="mailto:&#x67;&#x69;&#116;&#x40;&#x67;&#105;&#116;&#x68;&#x75;&#98;&#x2e;&#x63;&#111;&#109;">git@github.com</a>:用户名&#x2F;仓库名.git</p></li><li><p>origin：<br>远程仓库的默认别名（可自定义，但通常用origin）。</p></li></ul><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，<strong>master</strong>是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。</p><p><img src="/img/git%E4%BD%BF%E7%94%A8/%E5%88%86%E6%94%AF.png" alt="分支"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个叫做“feature_x”的分支，并切换过去：</span><br>git checkout -b feature_x<br><span class="hljs-comment"># 切换回主分支：</span><br>git checkout master<br><span class="hljs-comment"># 再把新建的分支删掉：</span><br>git branch -d feature_x<br><span class="hljs-comment"># 除非你将分支推送到远端仓库，不然该分支就是不为他人所见的：</span><br>git push origin &lt;branch&gt;<br></code></pre></td></tr></table></figure><h3 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h3><p>要更新你的本地仓库至最新改动，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull<br></code></pre></td></tr></table></figure><p>以在你的工作目录中<strong>获取（fetch）</strong> 并 <strong>合并(merge)</strong> 远端的改动。<br>要合并其他分支到你的当前分支（例如 master），执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git merge &lt;branch&gt;<br></code></pre></td></tr></table></figure><p>在这两种情况下，git都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。<br>改完之后，你需要执行如下命令以将它们标记为合并成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add &lt;filename&gt;<br></code></pre></td></tr></table></figure><p>在合并改动之前，你可以使用如下命令预览差异：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff &lt;source_branch&gt; &lt;target_branch&gt;<br></code></pre></td></tr></table></figure><h3 id="替换本地改动"><a href="#替换本地改动" class="headerlink" title="替换本地改动"></a>替换本地改动</h3><p>假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -- &lt;filename&gt;<br></code></pre></td></tr></table></figure><p>丢弃对指定文件的未提交修改​​将工作区中的文件恢复到最近一次提交（HEAD）或暂存区（如果已 git add）的状态，​​不可逆​​。<br>​适用场景​​</p><ul><li>修改了文件但未 git add（未暂存）→ 恢复到 HEAD版本。</li><li>修改了文件且已 git add（已暂存）→ 恢复到暂存区版本。</li><li>误删了文件 → 恢复文件到版本库中的状态。</li><li></li></ul><p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从远程仓库（origin）下载最新的提交记录和分支信息，但​​不会自动合并或修改本地代码​​。</span><br>git fetch origin<br><span class="hljs-comment"># 强制将当前分支重置到 origin/master的提交。</span><br><span class="hljs-comment"># --hard：彻底重置工作区和暂存区，匹配远程分支。</span><br>git reset --hard origin/master<br></code></pre></td></tr></table></figure><h2 id="本地仓库git初始化"><a href="#本地仓库git初始化" class="headerlink" title="本地仓库git初始化"></a>本地仓库git初始化</h2><h3 id="使用ssh登陆"><a href="#使用ssh登陆" class="headerlink" title="使用ssh登陆"></a>使用ssh登陆</h3><ol><li>先生成ssh密钥（如果没有的话）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br><br><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><ul><li>私钥：~&#x2F;.ssh&#x2F;id_rsa（​​切勿泄露​​）</li><li>公钥：~&#x2F;.ssh&#x2F;id_rsa.pub（需上传到 Git 服务商）</li></ul><ol start="2"><li>将公钥添加到远程仓库</li><li>测试ssh连接</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com  <span class="hljs-comment"># GitHub</span><br>ssh -T git@gitlab.com  <span class="hljs-comment"># GitLab</span><br></code></pre></td></tr></table></figure><p>连接成功返回：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hi TARScn! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树构造和遍历程序</title>
    <link href="/2025/07/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9E%84%E9%80%A0%E5%92%8C%E9%81%8D%E5%8E%86%E7%A8%8B%E5%BA%8F/"/>
    <url>/2025/07/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9E%84%E9%80%A0%E5%92%8C%E9%81%8D%E5%8E%86%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h2><p>二叉树构造如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>    <span class="hljs-type">int</span> val;                <span class="hljs-comment">// 节点值</span><br>    TreeNode *left;         <span class="hljs-comment">// 左子树</span><br>    TreeNode *right;        <span class="hljs-comment">// 右子树</span><br>    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-built_in">TreeNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">left</span>(<span class="hljs-literal">NULL</span>), <span class="hljs-built_in">right</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><p>顺序为<strong>根-&gt;左子树-&gt;右子树</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preorder</span><span class="hljs-params">(TreeNode* node)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!node) <span class="hljs-keyword">return</span>;<br>    cout &lt;&lt; node-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">preorder</span>(node-&gt;left);<br>    <span class="hljs-built_in">preorder</span>(node-&gt;right);<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs"> 构造如下二叉树：       1      / \     2   3    / \   4   5</code></pre><p>遍历结果为<strong>1 2 4 5 3</strong></p><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>顺序为<strong>左子树-&gt;根-&gt;右子树</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inorder</span><span class="hljs-params">(TreeNode* node)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!node) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-built_in">inorder</span>(node-&gt;left);                 <span class="hljs-comment">// 先遍历左子树</span><br>    std::cout &lt;&lt; node-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;       <span class="hljs-comment">// 再访问根节点</span><br>    <span class="hljs-built_in">inorder</span>(node-&gt;right);                <span class="hljs-comment">// 最后遍历右子树</span><br>&#125;<br></code></pre></td></tr></table></figure><p>遍历结果为<strong>4 2 5 1 3</strong></p><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>顺序为<strong>左子树-&gt;右子树-&gt;根</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postorder</span><span class="hljs-params">(TreeNode* node)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!node) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-built_in">postorder</span>(node-&gt;left);      <span class="hljs-comment">// 先遍历左子树</span><br>    <span class="hljs-built_in">postorder</span>(node-&gt;right);     <span class="hljs-comment">// 再遍历右子树</span><br>    std::cout &lt;&lt; node-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>; <span class="hljs-comment">// 最后访问根节点</span><br>&#125;<br></code></pre></td></tr></table></figure><p>遍历结果为<strong>4 5 2 3 1</strong></p>]]></content>
    
    
    <categories>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树遍历</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hot100练习</title>
    <link href="/2025/07/09/hot100%E7%BB%83%E4%B9%A0/"/>
    <url>/2025/07/09/hot100%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="相交链表-160"><a href="#相交链表-160" class="headerlink" title="相交链表(160)"></a>相交链表(160)</h2><p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。(题目数据 保证 整个链式结构中不存在环)</p><p>依次遍历所有节点<br>假设链表A长度为<strong>m+c</strong>，链表Bw长度为<strong>n+c</strong>，所以遍历长度为<strong>m+n+c</strong>就可完成所有链表节点遍历。<br>对链表A，遍历m+c+n<br>对链表B，遍历n+c+m</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode *headA, ListNode *headB)</span> </span>&#123;<br>        ListNode *a = headA;<br>        ListNode *b = headB;<br>        <br>        <span class="hljs-keyword">while</span>(a != b)<br>        &#123;<br>            a = a?a-&gt;next:headB;<br>            b = b?b-&gt;next:headA;<br>        &#125;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>暴力手撕</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode *headA, ListNode *headB)</span> </span>&#123;<br>        ListNode *a = headA;<br>        ListNode *b = headB;<br>        <br>        <span class="hljs-keyword">while</span>(a != <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(b != <span class="hljs-literal">NULL</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(a == b)  <span class="hljs-keyword">return</span> a;<br>                b = b-&gt;next;<br>            &#125;<br>            a = a-&gt;next;<br>            b = headB;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="二叉树的最近公共祖先（236）（递归）"><a href="#二叉树的最近公共祖先（236）（递归）" class="headerlink" title="二叉树的最近公共祖先（236）（递归）"></a>二叉树的最近公共祖先（236）（递归）</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><pre><code class="hljs"> 构造如下二叉树：        1      /   \     2     3    / \   / \   4   5 6   7   </code></pre><p>如4，5的公共祖先为2； 1，6的公共祖先为1。</p><p>思路：使用递归<br>某个根节点，左子树中是否有孩子，右子树中是否有孩子。<br>若左右子树都有孩子，那这个根节点是公共祖先；<br>若单侧有孩子，那单侧的某个孩子为公共祖先。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">lowestCommonAncestor</span><span class="hljs-params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 根为空则向上返回</span><br>        <span class="hljs-comment">// 当前根节点是孩子，返回上一层，且这侧有孩子；</span><br>        <span class="hljs-keyword">if</span>(p == root || q == root) <span class="hljs-keyword">return</span> root; <br>        <span class="hljs-comment">// 遍历左子树，看是否有孩子</span><br>        TreeNode* left = <span class="hljs-built_in">lowestCommonAncestor</span>(root-&gt;left,p,q);<br>        TreeNode* right = <span class="hljs-built_in">lowestCommonAncestor</span>(root-&gt;right,p,q);<br>        <span class="hljs-comment">// 判断当前根节点是否是公共祖先，是则一直返回上层直到解除递归</span><br>        <span class="hljs-keyword">if</span>(left &amp;&amp; right) <span class="hljs-keyword">return</span> root;<br>        <span class="hljs-comment">// 不是祖先则向上返回非空侧</span><br>        <span class="hljs-keyword">return</span> left?left:right;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="回文链表（234）-双指针"><a href="#回文链表（234）-双指针" class="headerlink" title="回文链表（234）(双指针)"></a>回文链表（234）(双指针)</h2><p>给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。</p><p>暴力手撕</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br>        ListNode* p = head;<br>        <br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(p)<br>        &#123;<br>            st.<span class="hljs-built_in">push</span>(p-&gt;val);<br>            p = p-&gt;next;<br>            i++;<br>        &#125;<br>        p = head;<br>        i /= <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l=<span class="hljs-number">0</span>;l&lt;i;l++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(p-&gt;val == st.<span class="hljs-built_in">top</span>())&#123;<br>                    p = p-&gt;next;<br>                    st.<span class="hljs-built_in">pop</span>();<br>                &#125;<span class="hljs-keyword">else</span> <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>采用数组加双指针的思想</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; vt;<br>        <span class="hljs-keyword">while</span>(head != <span class="hljs-literal">nullptr</span>)&#123;<br>            vt.<span class="hljs-built_in">emplace_back</span>(head-&gt;val);<br>            head = head-&gt;next;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>, j=(<span class="hljs-type">int</span>)vt.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; i&lt;j; i++,j--)&#123;<br>            <span class="hljs-keyword">if</span>(vt[i] != vt[j])<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="每日温度（739）（单调栈）"><a href="#每日温度（739）（单调栈）" class="headerlink" title="每日温度（739）（单调栈）"></a>每日温度（739）（单调栈）</h2><p>给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer ，其中 answer[i] 是指对于第 i 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 0 来代替。</p><p>暴力手撕，时间复杂度为$O(N^2)$，超时无法通过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dailyTemperatures</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; temperatures)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>        vector&lt;<span class="hljs-type">int</span>&gt; answer;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i = temperatures.<span class="hljs-built_in">begin</span>(); i != temperatures.<span class="hljs-built_in">end</span>(); i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> j = i<span class="hljs-number">+1</span>; j != temperatures.<span class="hljs-built_in">end</span>(); j++)&#123;<br>                n++;<br>                <span class="hljs-comment">// 后续出现更高温度</span><br>                <span class="hljs-keyword">if</span>(*i &lt; *j)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">//后续没有最高温度</span><br>                <span class="hljs-keyword">if</span>(j == temperatures.<span class="hljs-built_in">end</span>()<span class="hljs-number">-1</span>)&#123;<br>                    n = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>            answer.<span class="hljs-built_in">emplace_back</span>(n);<br>            n = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> answer;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>使用<strong>单调栈</strong></p><p>单调栈（Monotonic Stack）是一种特殊的栈结构，它保持栈内元素的单调递增（Increasing）或单调递减（Decreasing）性质。它常用于解决 ​​“下一个更大&#x2F;更小元素”​​ 类问题，时间复杂度通常为 $O(N)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dailyTemperatures</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; temperatures)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(temperatures.size(), <span class="hljs-number">0</span>)</span></span>;<br>        stack&lt;<span class="hljs-type">int</span>&gt; st; <span class="hljs-comment">// 只需存储索引</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; temperatures.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-comment">// 维护单调递减栈（栈顶最小）</span><br>            <span class="hljs-keyword">while</span> (!st.<span class="hljs-built_in">empty</span>() &amp;&amp; temperatures[i] &gt; temperatures[st.<span class="hljs-built_in">top</span>()]) &#123;<br>                ans[st.<span class="hljs-built_in">top</span>()] = i - st.<span class="hljs-built_in">top</span>(); <span class="hljs-comment">// 计算等待天数</span><br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            st.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>单调栈的其它例题</p><h2 id="柱状图中的最大矩形（84）-单调栈"><a href="#柱状图中的最大矩形（84）-单调栈" class="headerlink" title="柱状图中的最大矩形（84）(单调栈)"></a>柱状图中的最大矩形（84）(单调栈)</h2><p>给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。<br>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p><p><img src="/img/hot100%E7%BB%83%E4%B9%A0/84.png" alt="示例"></p><p>利用单调栈找两边更低的左右边界</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">largestRectangleArea</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; heights)</span> </span>&#123;<br>        <span class="hljs-type">int</span> maxS;<br>        stack&lt;<span class="hljs-type">int</span>&gt; stkr,stkl;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">leftSmaller</span><span class="hljs-params">(heights.size(),<span class="hljs-number">-1</span>)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rightSmaller</span><span class="hljs-params">(heights.size(),heights.size())</span></span>;<br><br>        <span class="hljs-keyword">if</span>(heights.<span class="hljs-built_in">size</span>()==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> heights[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;heights.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">while</span>(!stkr.<span class="hljs-built_in">empty</span>() &amp;&amp; heights[i]&lt;heights[stkr.<span class="hljs-built_in">top</span>()])<br>            &#123;<br>                rightSmaller[stkr.<span class="hljs-built_in">top</span>()] = i;<br>                stkr.<span class="hljs-built_in">pop</span>(); <br>            &#125;<br>            stkr.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=heights.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            <span class="hljs-keyword">while</span>(!stkl.<span class="hljs-built_in">empty</span>() &amp;&amp; heights[i]&lt;heights[stkl.<span class="hljs-built_in">top</span>()])<br>            &#123;<br>                leftSmaller[stkl.<span class="hljs-built_in">top</span>()] = i;<br>                stkl.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            stkl.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;heights.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-type">int</span> nowS = heights[i]*(rightSmaller[i]-leftSmaller[i]<span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">if</span>(nowS&gt;maxS) maxS = nowS;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxS;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="盛最多水的容器（11）-双指针"><a href="#盛最多水的容器（11）-双指针" class="headerlink" title="盛最多水的容器（11）(双指针)"></a>盛最多水的容器（11）(双指针)</h2><p>给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。</p><p>找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p><img src="/img/hot100%E7%BB%83%E4%B9%A0/11.png" alt="示例"></p><p>暴力求解，但是提交超时，复杂度$O(N^2)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; height)</span> </span>&#123;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>,now=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;height.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i<span class="hljs-number">+1</span>;j&lt;height.<span class="hljs-built_in">size</span>();j++)&#123;<br>                <span class="hljs-keyword">if</span>(height[j]&gt;height[i])&#123;<br>                    now = height[i]*(j-i);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    now = height[j]*(j-i);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(now&gt;ret) ret = now;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>采用双指针，从两边向中间遍历，复杂度$O(N)$<br>在每个状态下，无论长板或短板向中间收窄一格，都会导致水槽 底边宽度 −1​ 变短：</p><p>若向内 移动短板 ，水槽的短板 min(h[i],h[j]) 可能变大，因此下个水槽的面积 可能增大 。<br>若向内 移动长板 ，水槽的短板 min(h[i],h[j])​ 不变或变小，因此下个水槽的面积 一定变小 。<br>因此，初始化双指针分列水槽左右两端，循环每轮将短板向内移动一格，并更新面积最大值，直到两指针相遇时跳出；即可获得最大面积。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; height)</span> </span>&#123;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>,h;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=height.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br><br>        <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>            h = height[left]&lt;height[right] ? height[left]:height[right];<br>            ret = ret&gt;(h*(right-left)) ? ret:h*(right-left);<br>            <span class="hljs-keyword">if</span>(height[left]&lt;height[right])<br>                left++;<br>            <span class="hljs-keyword">else</span><br>                right--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="最大正方形（221）（动态规划）"><a href="#最大正方形（221）（动态规划）" class="headerlink" title="最大正方形（221）（动态规划）"></a>最大正方形（221）（动态规划）</h2><p>在一个由 ‘0’ 和 ‘1’ 组成的二维矩阵内，找到只包含 ‘1’ 的最大正方形，并返回其面积。<br>这题主要是想到dp的递推公式。</p><p><img src="/img/hot100%E7%BB%83%E4%B9%A0/221.png" alt="计算dp"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">dp</span><span class="hljs-params">(i,j)</span></span>=<span class="hljs-built_in">min</span>(<span class="hljs-built_in">dp</span>(i−<span class="hljs-number">1</span>,j),<span class="hljs-built_in">dp</span>(i−<span class="hljs-number">1</span>,j−<span class="hljs-number">1</span>),<span class="hljs-built_in">dp</span>(<span class="hljs-selector-tag">i</span>,j−<span class="hljs-number">1</span>))+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximalSquare</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (matrix.<span class="hljs-built_in">empty</span>() || matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-type">int</span> m = matrix.<span class="hljs-built_in">size</span>(), n = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(m, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n, <span class="hljs-number">0</span>));<br>        <span class="hljs-type">int</span> max_side = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (matrix[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> || j == <span class="hljs-number">0</span>) &#123;<br>                        dp[i][j] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 第一行或第一列，边长最大为 1</span><br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        dp[i][j] = <span class="hljs-built_in">min</span>(&#123;dp[i<span class="hljs-number">-1</span>][j], dp[i][j<span class="hljs-number">-1</span>], dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]&#125;) + <span class="hljs-number">1</span>;<br>                    &#125;<br>                    max_side = <span class="hljs-built_in">max</span>(max_side, dp[i][j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> max_side * max_side;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AVL树和红黑树介绍</title>
    <link href="/2025/07/02/AVL%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BB%8B%E7%BB%8D/"/>
    <url>/2025/07/02/AVL%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="AVL树介绍"><a href="#AVL树介绍" class="headerlink" title="AVL树介绍"></a>AVL树介绍</h1><h2 id="什么是AVL树？"><a href="#什么是AVL树？" class="headerlink" title="什么是AVL树？"></a>什么是AVL树？</h2><p><strong>AVL树</strong>（Adelson-Velsky and Landis Tree）是一种<strong>自平衡二叉搜索树</strong>（Self-Balancing Binary Search Tree）。<br>它由苏联数学家 <strong>G.M. Adelson-Velsky</strong> 和 <strong>E.M. Landis</strong> 于1962年发明，是最早提出的自平衡二叉查找树之一。</p><p><strong>特点：</strong></p><ul><li>任何一个节点的左子树和右子树的高度差（平衡因子）最多为1。</li><li>保证树的高度始终为O(log n)，插入、删除和查找操作都可以在对数时间内完成。</li></ul><h2 id="AVL树的定义"><a href="#AVL树的定义" class="headerlink" title="AVL树的定义"></a>AVL树的定义</h2><p>对于树中的每一个节点，定义：</p><ul><li><strong>高度（Height）</strong>：从该节点到叶子节点的最长路径长度（叶子高度为0）。</li><li><strong>平衡因子（Balance Factor, BF）</strong>：<br>[<br>BF &#x3D; \text{左子树高度} - \text{右子树高度}<br>]</li><li>AVL树要求：所有节点的平衡因子必须满足：<br>[<br>BF \in {-1, 0, +1}<br>]</li></ul><h2 id="旋转示意图"><a href="#旋转示意图" class="headerlink" title="旋转示意图"></a>旋转示意图</h2><p>以下示意展示两种最常用的旋转：</p><p><strong>右旋 (Right Rotation)：</strong></p><p><img src="/img/AVL%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BB%8B%E7%BB%8D/youxuan.jpg" alt="右旋"></p><blockquote><p>左旋为右旋的镜像</p></blockquote><h2 id="AVL树的基本操作"><a href="#AVL树的基本操作" class="headerlink" title="AVL树的基本操作"></a>AVL树的基本操作</h2><h3 id="1-插入"><a href="#1-插入" class="headerlink" title="1. 插入"></a>1. 插入</h3><p>插入节点后，可能破坏树的平衡性。需要沿插入路径向上回溯，并进行**旋转（Rotation）**修复。</p><p>常见的四种情况：</p><ul><li><strong>LL型（左-左）：</strong> 对不平衡节点进行<strong>右旋</strong>。</li><li><strong>RR型（右-右）：</strong> 对不平衡节点进行<strong>左旋</strong>。</li><li><strong>LR型（左-右）：</strong> 先对左子节点进行<strong>左旋</strong>，再对不平衡节点进行<strong>右旋</strong>。</li><li><strong>RL型（右-左）：</strong> 先对右子节点进行<strong>右旋</strong>，再对不平衡节点进行<strong>左旋</strong>。</li></ul><h3 id="2-删除"><a href="#2-删除" class="headerlink" title="2. 删除"></a>2. 删除</h3><p>删除节点后也可能导致平衡性破坏，需要从删除位置往上回溯，并进行相应的旋转修复。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><a href="https://www.bilibili.com/video/BV1uuFpeKEGd?spm_id_from=333.788.videopod.sections&vd_source=1a88fb46407c6a5cc8a52eb1ea305721">AVL树插入示例</a><br><a href="https://www.bilibili.com/video/BV1rufJYyEms/?spm_id_from=333.337.search-card.all.click&vd_source=1a88fb46407c6a5cc8a52eb1ea305721">AVL树删除示例</a></p><h1 id="红黑树介绍"><a href="#红黑树介绍" class="headerlink" title="红黑树介绍"></a>红黑树介绍</h1><h2 id="什么是红黑树？"><a href="#什么是红黑树？" class="headerlink" title="什么是红黑树？"></a>什么是红黑树？</h2><p><strong>红黑树（Red-Black Tree）</strong> 是一种自平衡的<strong>二叉搜索树（BST）</strong>。<br>它在插入和删除节点后，通过特定的规则进行调整，使得整棵树保持“近似平衡”，从而保证查找、插入、删除操作的时间复杂度为 <strong>O(log n)</strong>。</p><h2 id="红黑树的性质"><a href="#红黑树的性质" class="headerlink" title="红黑树的性质"></a>红黑树的性质</h2><p>红黑树每个节点上附加一个颜色属性：<strong>红色（Red）<strong>或</strong>黑色（Black）</strong>，并满足以下五条性质：</p><ol><li>每个节点要么是红色，要么是黑色。</li><li>根节点是黑色。</li><li>每个叶子节点（NIL节点）是黑色。</li><li>如果一个节点是红色的，则它的两个子节点都是黑色的（不会出现连续的红色节点）。</li><li>从任一节点到其所有后代叶子节点的路径上，<strong>黑色节点数量相同</strong>。</li></ol><p><strong>红黑树的实质是黑色节点的高度平衡</strong></p><h2 id="红黑树的基本操作"><a href="#红黑树的基本操作" class="headerlink" title="红黑树的基本操作"></a>红黑树的基本操作</h2><h3 id="1-插入（Insert）"><a href="#1-插入（Insert）" class="headerlink" title="1. 插入（Insert）"></a>1. 插入（Insert）</h3><p>插入节点初始为<strong>红色</strong>，然后根据红黑树性质进行修复：</p><ul><li>情况1：新节点的叔叔是红色 → 变色 + 向上递归</li><li>情况2：叔叔是黑色，且当前节点是“外侧” → 变色 + 旋转</li><li>情况3：叔叔是黑色，且当前节点是“内侧” → 旋转 + 变色 + 旋转</li></ul><p><strong>需要注意的是红黑树的叶子是黑色的NIL</strong><br>因为插入节点为红色，所以<strong>插入会破坏的性质只可能是性质2和性质4</strong>。</p><p>关注点在于<strong>红红冲突</strong>，然后考虑叔叔节点是红色还是黑色。</p><p>如果<strong>叔叔节点是红色</strong>则符合情况1，直接将<strong>叔叔节点和父节点染黑，祖父节点染红，接着检查祖父节点如果是根节点则染黑</strong>，递归向上。</p><p>如果<strong>叔叔节点是黑色</strong>则考虑情况2、3，其实情况3可以通过选择转换为情况2。</p><p><img src="/img/AVL%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BB%8B%E7%BB%8D/ranse.jpg" alt="叔叔节点为黑色的处理"></p><p>依次插入1，2，3，4，5，6，7，8生成的红黑树步骤如下</p><p><img src="/img/AVL%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BB%8B%E7%BB%8D/exp1.jpg" alt="例子1"></p><h3 id="2-删除（Delete）"><a href="#2-删除（Delete）" class="headerlink" title="2. 删除（Delete）"></a>2. 删除（Delete）</h3><p>删除一个节点可能破坏黑色平衡，需要使用“<strong>双重黑色</strong>”处理机制，并通过：</p><ul><li>兄弟变色</li><li>旋转</li><li>传递双黑等方式进行修复</li></ul><p><img src="/img/AVL%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BB%8B%E7%BB%8D/rbtRe.png" alt="红黑树删除节点的情况"></p><p>第三种情况是<strong>有左孩子和右孩子</strong>，可以通过<strong>直接后继</strong>（直接前继）替代，再删除后继（前继）的方式，转换 成其他情况。</p><h4 id="只有左孩子或者右孩子"><a href="#只有左孩子或者右孩子" class="headerlink" title="只有左孩子或者右孩子"></a><strong>只有左孩子或者右孩子</strong></h4><blockquote><p>直接删去后，孩子染黑替换</p></blockquote><p><img src="/img/AVL%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BB%8B%E7%BB%8D/re1.jpg" alt="处理方式"></p><h4 id="没有孩子"><a href="#没有孩子" class="headerlink" title="没有孩子"></a><strong>没有孩子</strong></h4><ol><li>自身是红节点</li></ol><blockquote><p>直接删除即可</p></blockquote><ol start="2"><li>自身是黑节点（删除后变双黑），兄弟是红色。</li></ol><blockquote><p>兄父变色，朝双黑旋转。保持双黑，继续消除。</p></blockquote><p><img src="/img/AVL%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BB%8B%E7%BB%8D/re2.jpg" alt="处理方式"></p><ol><li>自身是黑节点（删除后变双黑），兄弟是黑色，兄弟存在红孩子。</li></ol><blockquote><p>如果兄弟外侧是红孩子。r-&gt;s，s-&gt;p，p变黑，旋转</p></blockquote><p><img src="/img/AVL%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BB%8B%E7%BB%8D/re3.jpg" alt="处理方式"></p><blockquote><p>如果兄弟只有内侧有孩子，且是红孩子。r-&gt;p，p变黑，旋转孩子，旋转。</p></blockquote><p><img src="/img/AVL%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BB%8B%E7%BB%8D/re4.jpg" alt="处理方式"></p><ol start="4"><li>自身是黑节点（删除后变双黑），兄弟是黑色，兄弟都是黑孩子。</li></ol><blockquote><p>兄弟变红，双黑上移（遇红遇根变黑）。</p></blockquote><p><a href="https://www.bilibili.com/video/BV16m421u7Tb?spm_id_from=333.788.videopod.sections&vd_source=1a88fb46407c6a5cc8a52eb1ea305721">红黑树删除示例</a></p><p>依次从红黑树删除18，25，15，6，13，37，27，17，34，9，10</p><p><img src="/img/AVL%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BB%8B%E7%BB%8D/re5.png" alt="示例"></p><p><img src="/img/AVL%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BB%8B%E7%BB%8D/re6.png" alt="示例"></p><h3 id="3-查找（Search）"><a href="#3-查找（Search）" class="headerlink" title="3. 查找（Search）"></a>3. 查找（Search）</h3><p>和普通的二叉搜索树一样，查找过程为从根节点出发，逐层比较关键字。</p>]]></content>
    
    
    <categories>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>红黑树</tag>
      
      <tag>AVL树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis设计与实现读书笔记二--单机数据库</title>
    <link href="/2025/06/27/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2025/06/27/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="服务器中的数据库"><a href="#服务器中的数据库" class="headerlink" title="服务器中的数据库"></a>服务器中的数据库</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">redisServer</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 数据库数组，保存服务器中的所有数据库</span><br>    redisDb *db;<br>    <span class="hljs-comment">// 服务器中的数据库数量</span><br>    <span class="hljs-type">int</span> dbnum;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>dbnum的值有服务器配置的database选项决定，默认为16。</p><p>客户端状态redisClient结构的db属性记录了客户端当前的目标数据库：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">redisClient</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 记录客户端当前使用的数据库</span><br>    redisDb *db;<br>    <span class="hljs-comment">// ...</span><br>&#125; redisClient;<br></code></pre></td></tr></table></figure><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/redisDb.png" alt="客户端的目标数据库为1号数据库"></p><h3 id="数据库键空间"><a href="#数据库键空间" class="headerlink" title="数据库键空间"></a>数据库键空间</h3><p>redis是一个键值对数据库服务器，服务器中的数据器结构redisDb中的<strong>dict</strong>字典保存了数据库中的所有键值对，这个字典被称为<strong>键空间</strong>（key space）。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/keySpace.png" alt="键空间例子"></p><p>数据库的操作如添加、删除、更新、取值等都是键空间操作。</p><h3 id="键的过期机制"><a href="#键的过期机制" class="headerlink" title="键的过期机制"></a>键的过期机制</h3><p>redisDb中的<strong>expires</strong>字典保存了数据库中所有键的过期时间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">redisDb</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 数据键空间，保存键空间所有的键值对</span><br>    dict *dict;<br>    <span class="hljs-comment">// 过期字典，保存键值对的过期时间</span><br>    dict *expires;<br>    <span class="hljs-comment">// ...</span><br>&#125;redisDb;<br></code></pre></td></tr></table></figure><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/expires.png" alt="带过期字典的数据库例子"></p><ul><li>过期字典的键是一个指针，指向键空间中的某个键对象</li><li>过期字典的值是一个long long类型的整数，过期时间–一个毫秒精度的UNIX时间戳</li></ul><h3 id="过期键的删除"><a href="#过期键的删除" class="headerlink" title="过期键的删除"></a>过期键的删除</h3><p>redis过期键的删除策略为<strong>定期删除</strong>和<strong>惰性删除</strong>。</p><h4 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h4><p>定期删除策略每隔一段固定时间执行一次删除过期键操作，并通过限制删除操作执行的时长和频率来减少对CPU时间的影响。</p><p>redis周期性操作进行时，activaExpireCycle函数会在规定的时间内，分多次遍历服务器中的各个数据库，从数据库的<strong>expires</strong>字典中随机检查部分键的过期时间，并删除其中的过期键。</p><h4 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h4><p>惰性删除是指程序只会在取出键时才会对键进行过期检查，删除的目标仅限于当前操作键，避免了浪费CPU时间，但是redis是内存服务器，这一策略会造成内存浪费。</p><blockquote><p>redis同时采用了<strong>定期删除和惰性删除并结合</strong>。</p></blockquote><h2 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h2><p>redis是一个内存数据库，当服务器进程退出时，数据库状态也会消失。redis提供了RDB持久化功能，可以手动开启，也可以定期保存。RDB持久化功能生成的文件是一个经过压缩的二进制文件，可通过这个文件还原数据库状态。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/RDB.png" alt="数据库和RDB文件互相转换"></p><blockquote><p>RDB文件通过演进，老版本的redis无法兼容新版本的RDB，因为有部分数据结构不匹配。</p></blockquote><h3 id="保存与载入"><a href="#保存与载入" class="headerlink" title="保存与载入"></a>保存与载入</h3><p>当AOF持久化功能开启时，redis会优先使用AOF，因为AOF更新频率更高。<br>创建RDB文件创建RDB文件有<strong>SAVE</strong>和<strong>BGSAVE</strong>两个命令。</p><ul><li><strong>SAVE</strong><br>直接创建RDB文件，会中断服务器程序</li><li><strong>BGSAVE</strong><br>父程序会fork一个子程序，由子程序创建RDB文件，不会中断服务器程序。</li></ul><p>保存的RDB文件名字叫做<strong>dump.rdb</strong>，存放位置需要通过<strong>redis.conf</strong>设置，否则默认当前的工作目录下。<br>开启redis时，自动载入<strong>dump.rdb</strong>，载入RDB文件时，服务器程序会出于阻塞状态，直到载入工作完成。</p><p>保存条件设置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 只要满足以下三个条件中的任何一个，BGSAVE都会执行</span><br><span class="hljs-comment"># 服务器在900秒内，对数据库进行了至少1次修改</span><br>save 900 1<br><span class="hljs-comment"># 服务器在300秒内，对数据库进行了至少10次修改</span><br>save 300 10<br><span class="hljs-comment"># 服务器在60秒内，对数据库进行了至少10000次修改</span><br>save 60 10000<br></code></pre></td></tr></table></figure><h3 id="RDB文件结构"><a href="#RDB文件结构" class="headerlink" title="RDB文件结构"></a>RDB文件结构</h3><p>下图为一个完整的RDB文件结构：</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/rdbfile.png" alt="RDB文件结构"></p><p>database结构如下：</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/rdbDatabase.png" alt="database结构"></p><p>key_value_pairs结构如下：</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/key_value_pairs.png" alt="带过期时间的key_value_pairs结构"></p><p>无过期时间的结构只有TYPE、key、value。</p><h2 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h2><p>AOF持久化是通过redis服务器所执行的写命令来记录数据库状态的。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/AOF.png" alt="AOF持久化"></p><h3 id="AOF持久化的实现"><a href="#AOF持久化的实现" class="headerlink" title="AOF持久化的实现"></a>AOF持久化的实现</h3><p>AOF持久化分为命令追加、文件写入、文件同步。</p><ol><li><strong>命令追加</strong></li></ol><p>AOF持久化开启后，如果redis执行完一个写命令后，会将写命令以协议格式追加到服务器状态的<strong>aof_buf</strong>缓冲区末尾。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">redisServer</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// AOF缓冲区</span><br>    sds aof_buf;<br>    <span class="hljs-comment">// ..</span><br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>文件写入与同步</strong></li></ol><p>redis程序是一个<strong>事件循环</strong>，循环中的文件事件负责接收客户端的命令请求，以及向客户端发送命令回复，循环中还包括定时运行的函数。开启AOF持久化后，服务器在结束一次事件循环之前，程序会调用<strong>flushAppendOnlyFile</strong>函数，选择是否将aof_buf中的内容写入和保存到AOF文件里面。</p><p><strong>flushAppendOnlyFile</strong>函数的行为由服务器配置的appendfsync选项决定：</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/appendfsync.png" alt="appendfsync配置不同的持久化行为"></p><blockquote><p>写入（<strong>write</strong>）在linux中只是把数据写入到内核页缓存，并未真正落盘。只有同步到硬盘才是落盘。</p></blockquote><h3 id="AOF文件载入和数据库还原"><a href="#AOF文件载入和数据库还原" class="headerlink" title="AOF文件载入和数据库还原"></a>AOF文件载入和数据库还原</h3><p>关键点在于创建一个不联网的伪客户端，利用伪客户端写入命令。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/aofLoad.png" alt="AOF文件载入过程"></p><h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><p>为了避免记录过多写命令导致的AOF文件庞大，redis重新生成新的AOF文件替代旧AOF文件被称为<strong>AOF重写</strong>。</p><p><strong>AOF重写是通过读取当前的数据库状态来实现的</strong>，而不用分析旧AOF文件。数据库中存在什么键值对，就写入什么，所以没有一句命令多余。</p><blockquote><p>为了避免在执行命令时造成客户端输入缓冲区溢出，重写程序会检查多元素的数量，超过固定值则通过执行多条命令记录键的值。</p></blockquote><p>为了保证执行AOF重写时，服务器依然可以正常工作，redis使用<strong>AOF后台重写</strong>技术。</p><p>redis会创建一个带有当前数据库所有数据的<strong>子进程</strong>，父进程依旧正常处理客户端命令，子进程执行AOF重写程序。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/aofRewrite.png" alt="AOF重写"></p><p>要让子进程重写结束后的AOF文件与当前父进程中的数据库状态一致，redis服务器在创建子进程之前，会维护一个<strong>AOF重写缓冲区</strong>。这个缓冲区会在子进程执行AOF重写期间，记录服务器执行的所有命令，当子进程完成所有工作之后，服务器将缓冲区中的所有内容添加到重写AOF文件的末尾，最后用这个新AOF文件替代旧文件。</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>redis是一个事件驱动程序。服务器处理以下两类事件：<strong>文件事件</strong>、<strong>时间事件</strong>。</p><h3 id="文件事件"><a href="#文件事件" class="headerlink" title="文件事件"></a>文件事件</h3><p>redis使用的网络事件处理器被称为<strong>文件事件处理器</strong>。</p><p>文件事件处理器使用<strong>I&#x2F;O多路复用程序</strong>同时监听多个套接字，为套接字目前执行的不同任务<strong>关联不同的事件处理器</strong>。被监听的套接字准备<strong>执行连接应答、读取、写入、关闭等操作</strong>时，产生对应的文件事件，<strong>文件处理器会调用之前关联的事件处理器</strong>。</p><blockquote><p><strong>I&#x2F;O多路复用是指一个线程同时监听多个I&#x2F;O流</strong>，是redis支持高并发的关键<br>原理是将所有关注的套接字注册到内核，内核</p></blockquote><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/FEH.png" alt="文件事件处理器的四个部分"></p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/cAndS.png" alt="客户端和服务器的通信过程"></p><h3 id="时间事件"><a href="#时间事件" class="headerlink" title="时间事件"></a>时间事件</h3><ul><li>时间事件分为以下两类：</li></ul><p><strong>定时事件</strong>：让程序在指定的时间之后执行一次。</p><p><strong>周期性事件</strong>：让程序每隔指定时间就执行一次。</p><ul><li>时间事件主要由以下三个属性组成：</li></ul><p><strong>id</strong>：全局唯一ID，新事件ID比旧事件ID大。<br><strong>when</strong>：毫秒精度UNIX时间戳，记录到达时间。<br><strong>timeProc</strong>：时间事件处理器，时间事件到达时，服务器调用相应处理器。</p><p>事件处理器返回返回ae.h&#x2F;<strong>AE_NOMORE</strong>，则事件为定时事件：事件到达一次之后被删除。如果是一个<strong>非AE_NOMORE</strong>的数，则为周期性事件，根据返回的值对<strong>when</strong>进行更新，让事件在这段时间之后到达。</p><h3 id="事件的调度和执行"><a href="#事件的调度和执行" class="headerlink" title="事件的调度和执行"></a>事件的调度和执行</h3><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/eventProc.png" alt="事件处理角度下的服务器运行流程"></p><p>服务器轮流处理文件事件和时间事件，处理事件的过程中<strong>不会进行抢占</strong>，因此事件处理器会尽可能减少阻塞时间，必要时主动<strong>让出执行权</strong>，时间事件也会把耗时的持久化操作放在子线程或子进程执行。<br>因为服务器先处理文件事件，所以<strong>时间事件的实际处理时间通常比设定的到达时间晚一些</strong>。</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="客户端属性"><a href="#客户端属性" class="headerlink" title="客户端属性"></a>客户端属性</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">redisClient</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-type">int</span> fd;<br>    ...<br>    <span class="hljs-type">int</span> flags;<br>    ...<br>    sds querybuf;<br>    ...<br>    robj **argv;<br>    <span class="hljs-type">int</span> argc;<br>    ...<br>    redisCommand *cmd;<br>    <span class="hljs-comment">// ...</span><br>&#125;redisClient;<br></code></pre></td></tr></table></figure><ul><li><strong>套接字描述符</strong></li></ul><p>客户端状态的<strong>fd</strong>属性记录客户端正在使用的套接字描述符，fd属性为-1则是<strong>伪客户端</strong>（AOF持久化、Lua脚本），普通客户端的fd为大于-1的值。</p><ul><li><strong>标志</strong></li></ul><p>客户端状态的标志属性<strong>flags</strong>记录客户端的<strong>角色（role）</strong>，以及客户端所处的状态。</p><ul><li><strong>输入缓冲区</strong></li></ul><p>客户端状态的<strong>querybuf</strong>输入缓存区用于保存客户端发来的命令请求。输入缓存区的大小会根据输入内容动态地缩小放大，最大<strong>不超过1GB，否则服务器关闭这个客户端</strong>。</p><ul><li><strong>命令与命令参数</strong></li></ul><p>服务器对输入缓存区中的命令请求进行分析，并将得出的<strong>命令参数</strong>和<strong>参数个数</strong>保存在客户端状态的argv和argc属性中。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/cmdClient.png" alt="argv和argc示例"></p><p>服务器根据argv[0]的值在<strong>命令表</strong>中查找命令所对应的<strong>命令实现函数</strong>。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/cmdTable.png" alt="命令表"></p><p><strong>redisCommand</strong>结构保存了命令的实现函数、命令的标志、命令应给定的参数个数和执行次数、执行时间等统计信息。</p><p>服务器找到对应redisCommand之后，会将客户端状态的<strong>cmd</strong>指针指向它。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/cmdSet.png" alt="查找命令并设置cmd属性"></p><p>之后，服务器可以通过cmd调用命令实现函数，执行客户端请求命令。</p><ul><li><strong>输出缓冲区</strong></li></ul><p>执行命令所得的命令回复会被保存在客户端状态的输出缓冲区。<br>每个客户端有<strong>两个输出缓冲区可用</strong>，一个<strong>大小固定</strong>（16KB），另一个<strong>大小可变</strong>的。</p><h3 id="客户端的创建和关闭"><a href="#客户端的创建和关闭" class="headerlink" title="客户端的创建和关闭"></a>客户端的创建和关闭</h3><h4 id="创建普通客户端"><a href="#创建普通客户端" class="headerlink" title="创建普通客户端"></a>创建普通客户端</h4><p>客户端通过网络连接服务器，客户端使用connect函数连接服务器时，服务器调用<strong>连接事件处理器</strong>，为客户端创建相应的<strong>客户端状态</strong>，并将新客户端状态添加到服务器状态结构<strong>clients</strong>链表的末尾。</p><h4 id="关闭普通客户端"><a href="#关闭普通客户端" class="headerlink" title="关闭普通客户端"></a>关闭普通客户端</h4><ul><li>客户端进程退出或被杀死，客、服之间的网络连接将被关闭，造成客户端被关闭</li><li>客户端向服务器发送了带有不符合协议格式的命令请求，客户端也会被关闭</li><li>用户为服务器设置了timeout配置选项，客户端空转时间超过之后被关闭（存在一些例外：主服务器、从服务器、BLPOP命令阻塞、执行订阅命令中）。</li><li>客户端发送命令请求大小超过输入缓冲区的大小（默认1GB）</li><li>要发送给客户端的命令回复大小超过了输出缓冲区的限制大小（硬性限制、软件限制）</li></ul><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="命令请求的执行过程"><a href="#命令请求的执行过程" class="headerlink" title="命令请求的执行过程"></a>命令请求的执行过程</h3><ol><li>客户端将命令请求发送给服务器</li><li>服务器读取命令，并分析命令参数</li><li>命令执行器根据参数查找命令的实现函数，然后执行实现函数并得出命令回复</li><li>服务器将命令回复返回给客户端</li></ol><h3 id="serverCron函数"><a href="#serverCron函数" class="headerlink" title="serverCron函数"></a>serverCron函数</h3><p>默认每隔100毫秒执行一次，主要用于更新服务器状态信息，处理服务器接收的SIGTERM信号，管理客户端资源和数据库状态，执行持久化操作等等。</p><h3 id="服务器初始化"><a href="#服务器初始化" class="headerlink" title="服务器初始化"></a>服务器初始化</h3><ol><li>初始化服务器状态</li><li>载入服务器配置</li><li>初始化服务器数据结构</li><li>还原数据库状态</li><li>执行事件循环</li></ol>]]></content>
    
    
    <categories>
      
      <category>redis设计与实现读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis设计与实现读书笔记一--数据结构</title>
    <link href="/2025/06/22/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2025/06/22/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>这本书采用redis为2.8，现在（2025年）redis更新版本到了7.x，作者下载redis源码版本为7.0.15。但是询问GPT得到的答案为基本数据结构没有大变动，但是新版本新添加了一些数据结构。</p><h2 id="简单动态字符串（SDS）"><a href="#简单动态字符串（SDS）" class="headerlink" title="简单动态字符串（SDS）"></a>简单动态字符串（SDS）</h2><h3 id="SDS实现"><a href="#SDS实现" class="headerlink" title="SDS实现"></a>SDS实现</h3><p>书中sds结构体定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sdshdr</span> &#123;<br>    <span class="hljs-comment">// 记录 buf 数组中已使用字节的数量</span><br>    <span class="hljs-comment">// 等于SDS 所保存字符串的长度</span><br>    <span class="hljs-type">int</span> len:<br>    <span class="hljs-comment">// 记录 buf 数组中未使用字节的数量</span><br>    <span class="hljs-type">int</span> free;<br>    <span class="hljs-comment">// 字节数组,用于保存字符串</span><br>    <span class="hljs-type">char</span> buf [];<br>&#125;;<br></code></pre></td></tr></table></figure><p>redis（7.0.15）中的定义为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__attribute__</span> ((__packed__)) sdshdr8 &#123;<br>    <span class="hljs-comment">// 实际使用的字节数</span><br>    <span class="hljs-type">uint8_t</span> len; <br>    <span class="hljs-comment">// 分配的总字节数，不包括头和\0结尾</span><br>    <span class="hljs-type">uint8_t</span> alloc; <span class="hljs-comment">/* excluding the header and null terminator */</span><br>    <span class="hljs-comment">// 记录SDS类型（8、16、32）</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> flags; <span class="hljs-comment">/* 3 lsb of type, 5 unused bits */</span><br>    <span class="hljs-type">char</span> buf[];<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="SDS特性"><a href="#SDS特性" class="headerlink" title="SDS特性"></a>SDS特性</h3><ul><li><strong>字符串长度快速查询</strong></li></ul><p>C语言中字符串查询长度复制度$O(n)$，而SDS中查询字符串长度的复杂度为$O(1)$，因为SDS中可以直接查字长len。记录字长也为SDS避免了后续修改字符串导致缓冲溢出的问题。</p><ul><li><strong>预分配与惰性空间</strong></li></ul><p>为了避免多次字符串修改导致的<strong>反复内存重分配</strong>，SDS使用了预分配与惰性空间的策略。<br>具体体现为：对SDS做拼接等增加字符的操作时，SDS会多分配一些内存空间；对SDS做截断等删除字符的操作时，SDS并不会把free的空间全部回收，而是做保留。<br>这种策略可以视为以空间换时间，提高了SDS的操作速度性能。</p><ul><li><strong>二进制安全</strong></li></ul><p>C语言的字符串默认以’\0’作为结尾标志，所以无法支持具有中间’\0’的数据，如<strong>图片、压缩包</strong>等。而SDS由于使用len记录字长，所以SDS中的数据可以包含任意个’\0’，而不用担心数据无法正常读取。</p><h2 id="链表-listNode"><a href="#链表-listNode" class="headerlink" title="链表(listNode)"></a>链表(listNode)</h2><h3 id="listNode-list实现"><a href="#listNode-list实现" class="headerlink" title="listNode&amp;list实现"></a>listNode&amp;list实现</h3><ul><li><strong>链表节点listNode结构</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">listNode</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">listNode</span> *prev;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">listNode</span> *next;<br>    <span class="hljs-type">void</span> *value;<br>&#125; listNode;<br></code></pre></td></tr></table></figure><ul><li><strong>链表list结构</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">list</span> &#123;<br>    listNode *head;<br>    listNode *tail;<br>    <span class="hljs-comment">// 节点值复制函数</span><br>    <span class="hljs-type">void</span> *(*dup)(<span class="hljs-type">void</span> *ptr);<br>    <span class="hljs-comment">// 节点值释放函数</span><br>    <span class="hljs-built_in">void</span> (*free)(<span class="hljs-type">void</span> *ptr);<br>    <span class="hljs-comment">// 节点值对比函数</span><br>    <span class="hljs-built_in">int</span> (*match)(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">void</span> *key);<br>    <span class="hljs-comment">// 链表所包含的节点数量</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> len;<br>&#125; list;<br></code></pre></td></tr></table></figure><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/list.png" alt="list和listNode组成的链结构"></p><h3 id="listnode-list特性"><a href="#listnode-list特性" class="headerlink" title="listnode&amp;list特性"></a>listnode&amp;list特性</h3><ul><li><strong>双端</strong></li></ul><p>链表节点带有<strong>prev</strong>和<strong>next</strong>指针,获取某个节点的前置节点和后置节点的复杂度都是$O(1)$。</p><ul><li><strong>表头表尾</strong></li></ul><p>链表list带有<strong>head</strong>和<strong>tail</strong>指针,获取链表的表头节点和表尾节点的复杂度都是$O(1)$。</p><ul><li><strong>节点计数器</strong></li></ul><p>链表list带有节点计数器<strong>len</strong>,获取链表中的节点数量复杂度是$O(1)$。</p><ul><li><strong>多态</strong></li></ul><p>链表节点中的<strong>value</strong>的指针类型是*<strong>void</strong>,所以链表可以保存各类不同类型的值。</p><h2 id="字典（dictionary-dict）"><a href="#字典（dictionary-dict）" class="headerlink" title="字典（dictionary&#x2F;dict）"></a>字典（dictionary&#x2F;dict）</h2><h3 id="哈希表-hash-table"><a href="#哈希表-hash-table" class="headerlink" title="哈希表 hash table"></a>哈希表 hash table</h3><p>哈希表又称散列表，是根据关键值来访问数据的一种数据结构。哈希表通过将关键键值映射为一个地址索引，加快数据的查找速度。做个比喻，学生学号和学生姓名分别对应关键键值（<strong>key</strong>）和数据（<strong>value</strong>），且存在一个数组（<strong>hash table</strong>），而<strong>key</strong>可以通过哈希算法得到一个数字索引（假设为1），则可以把数据放在数组索引为1的储存空间。下次我们要查找value，只需要通过key即可知道数据储存位置，而且理想情况下，查找复杂度为一个常数。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/hashTable.png" alt="哈希表"></p><p>redis的字典本质是一个哈希表，redis中定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dict</span> &#123;<br>    <span class="hljs-comment">// 哈希表数组</span><br>    dictEntry **table;<br>    dictType *type;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> size;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sizemask;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> used;<br>    <span class="hljs-type">void</span> *privdata;<br>&#125; dict;<br></code></pre></td></tr></table></figure><p>哈希表节点：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dictEntry</span> &#123;<br>    <span class="hljs-type">void</span> *key;<br>    <span class="hljs-type">void</span> *val;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dictEntry</span> *next;<br>&#125; dictEntry;<br></code></pre></td></tr></table></figure><h3 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h3><p>面对两个及以上key映射到同一个索引的情况，redis使用单向链表解决。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/oneKeyOnIndex.png" alt="一个包含两个键值对的哈希表"></p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/twoKeyOnIndex.png" alt="使用链表解决k2和k1的冲突"></p><h2 id="整数集合（intset）"><a href="#整数集合（intset）" class="headerlink" title="整数集合（intset）"></a>整数集合（intset）</h2><h3 id="intset实现"><a href="#intset实现" class="headerlink" title="intset实现"></a>intset实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">intset</span> &#123;<br>  <span class="hljs-comment">// 编码方式</span><br>  <span class="hljs-type">uint32_t</span> encoding;<br>  <span class="hljs-comment">// 集合包含的元素数量</span><br>  <span class="hljs-type">uint32_t</span> length;<br>  <span class="hljs-comment">// 保存元素的数组</span><br>  <span class="hljs-type">int8_t</span> contents [];<br>&#125; intset;<br></code></pre></td></tr></table></figure><p>contents数组是整数集合的底层实现:整数集合的每个元素都是contents数组的一个数组项 (item)，各个项在数组中按值的大小从小到大<strong>有序排列</strong>,并且数组中不包含任何重复项。</p><p>length属性记录了整数集合包含的元素数量,也即是contents数组的长度。虽然intset结构将contents属性声明为int8_t类型的数组,但实际上contents数组并不保存任何int8_t类型的值,contents数组的真正类型取决于encoding属性的值。</p><h3 id="intset特性"><a href="#intset特性" class="headerlink" title="intset特性"></a>intset特性</h3><ul><li><strong>升级</strong></li></ul><p>每当我们要将一个新元素添加到整数集合里面,并且新元素的类型比整数集合现有所有元素的类型都要长时,整数集合需要先进行升级(upgrade),然后才能将新元素添加到整数集合里面。</p><p>升级整数集合并添加新元素共分为三步进行:</p><ol><li>根据新元素的类型,扩展整数集合底层数组的空间大小,并为新元素分配空间。</li><li>将底层数组现有的所有元素都转换成与新元素相同的类型,并将类型转换后的元素放置到正确的位上,而且在放置元素的过程中,需要继续维持底层数组的有序性质不变。</li><li>将新元素添加到底层数组里面。</li></ol><p>相较于数组，intset有自动升级和有序排列的优势，能节约空间和加快查找。</p><ul><li><strong>降级</strong></li></ul><p>intset不支持降级操作。</p><h2 id="压缩列表（ziplist）"><a href="#压缩列表（ziplist）" class="headerlink" title="压缩列表（ziplist）"></a>压缩列表（ziplist）</h2><h3 id="ziplist实现"><a href="#ziplist实现" class="headerlink" title="ziplist实现"></a>ziplist实现</h3><p>压缩列表是 Redis 为了<strong>节约内存</strong>而开发的,是由一系列特殊编码的连续内存块组成的顺序型(sequential)数据结构。一个压缩列表可以包含任意多个节点(entry),每个节点可以保存一个<strong>字节数组</strong>或者一个<strong>整数值</strong>。</p><p>一个ziplist的构成如下图。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ziplistEx.png" alt="压缩列表"></p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ziplistNt.png" alt="各个组成说明"></p><p>一个entry的构成如下图。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ziplistEntry.png" alt="ziplist中的节点"></p><ul><li><strong>previous_entry_length</strong></li></ul><p>节点的 previous_entry_length 属性以字节为单位,记录了压缩列表中<strong>前一个节点</strong>的长度。previous entry length 属性的长度可以是1字节或者5字节。</p><ol><li>小于254个字节，previous_entry_length长度为1字节。</li><li>大于等于254个字节，previous_entry_length最高位字节为0xFE，剩下四位字节记录长度（最多2^32-1，4G）。</li></ol><ul><li><strong>encoding</strong></li></ul><p>节点的encoding属性记录了节点的content属性所保存数据的类型以及长度。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ziplistEncode.png" alt="encoding说明"></p><ul><li><strong>content</strong></li></ul><p>节点的content属性负责保存节点的值,节点值可以是一个字节数组或者整数,值的类型和长度由节点的encoding属性决定。</p><h3 id="ziplist特性"><a href="#ziplist特性" class="headerlink" title="ziplist特性"></a>ziplist特性</h3><ul><li><strong>连锁更新</strong></li></ul><p>由于单个entry中<strong>previous_entry_length</strong>有1字节和5字节两次长度，所以由某个节点<strong>previous_entry_length</strong>改变导致的其他多个节点的<strong>previous_entry_length</strong>改变的现象，被称为连锁更新。<br>连锁更新在最坏情况下需要对压缩列表执行N次空间重分配操作,而每次空间重分配的最坏复杂度为$O(N)$,所以连锁更新的最坏复杂度为$O(N^2)$。</p><h3 id="listpack"><a href="#listpack" class="headerlink" title="listpack"></a>listpack</h3><p>由于ziplist存在连锁更新等一些其他缺点，在redis 3后逐步被listpack取代。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/listpack.png" alt="listpack结构"></p><ul><li>totalbytes：listpack 占用的字节数，4 字节</li><li>size：listpack 节点数量，2 字节</li><li>element：节点元素</li><li>end：结尾符 0xFF 1 字节</li></ul><p>由于listpack只记录自身节点的长度，所以节点之间独立不会互相影响。</p><h3 id="quicklist"><a href="#quicklist" class="headerlink" title="quicklist"></a>quicklist</h3><p>quicklist是listpack与双向链表的混合体，兼顾节省内存和插入效率。</p><h2 id="跳表（skiplist）"><a href="#跳表（skiplist）" class="headerlink" title="跳表（skiplist）"></a>跳表（skiplist）</h2><p>skiplist是一种有序数据结构，通过在每个节点中维持多个指向其他节点的指针达到快速访问其他节点的目的。<strong>其支持平均$O(log(N))$,最坏$O(N)$复杂度的节点查找</strong>。</p><h3 id="skiplist实现"><a href="#skiplist实现" class="headerlink" title="skiplist实现"></a>skiplist实现</h3><p>skiplist由<strong>zskiplist</strong>结构和<strong>zskiplistNode</strong>结构来定义。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplist</span> &#123;<br>    <span class="hljs-comment">// 指向跳表的表头和表尾节点</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplistNode</span> *header, *tail;<br>    <span class="hljs-comment">// 记录跳表的长度，即表的总节点数</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> length;<br>    <span class="hljs-comment">// 记录节点（表头除外）最大的层数</span><br>    <span class="hljs-type">int</span> level;<br>&#125; zskiplist;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplistNode</span> &#123;<br>    <span class="hljs-comment">// 成员属性（书中为 robj *obj）</span><br>    sds ele;<br>    <span class="hljs-comment">// 跳表中的节点按此分值排列</span><br>    <span class="hljs-type">double</span> score;<br>    <span class="hljs-comment">// 节点后退指针</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplistNode</span> *backward;<br>    <span class="hljs-comment">// 层数组，每个元素包含一个指向其他节点的指针</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplistLevel</span> &#123;<br>        <span class="hljs-comment">// 指向其他节点</span><br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zskiplistNode</span> *forward;<br>        <span class="hljs-comment">// 跨度，记录两个节点之间的距离</span><br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> span;<br>    &#125; level[];<br>&#125; zskiplistNode;<br></code></pre></td></tr></table></figure><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/skiplist.png" alt="跳表结构"></p><p>各个跳表节点的最底层是一个完整的有序链表，每往上一层，都会<strong>跳过</strong>一些节点，形成“<strong>快捷通道</strong>”。</p><h2 id="对象（redisObject）"><a href="#对象（redisObject）" class="headerlink" title="对象（redisObject）"></a>对象（redisObject）</h2><p>redis并没有直接使用以上提到的数据结构实现键值对数据库，而是基于其构建了一个对象系统。</p><h3 id="对象的编码和类型"><a href="#对象的编码和类型" class="headerlink" title="对象的编码和类型"></a>对象的编码和类型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">redisObject</span> &#123;<br>    <span class="hljs-comment">// 对象类型</span><br>    <span class="hljs-type">unsigned</span> type:<span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 对象编码</span><br>    <span class="hljs-type">unsigned</span> encoding:<span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 记录对象最后一次的命令时间，用于得到空转时长</span><br>    <span class="hljs-type">unsigned</span> lru:LRU_BITS; <span class="hljs-comment">/* LRU time (relative to global lru_clock) or</span><br><span class="hljs-comment">                            * LFU data (least significant 8 bits frequency</span><br><span class="hljs-comment">                            * and most significant 16 bits access time). */</span><br>    <span class="hljs-comment">// 引用计数，用于自动回收内存</span><br>    <span class="hljs-type">int</span> refcount;<br>    <span class="hljs-comment">// 指向对象的底层实现数据结构</span><br>    <span class="hljs-type">void</span> *ptr;<br>&#125; robj;<br></code></pre></td></tr></table></figure><h4 id="类型-type"><a href="#类型-type" class="headerlink" title="类型-type"></a>类型-type</h4><p>redis的对象有以下五种类型：</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/objectType.png" alt="对象的类型"></p><h4 id="编码-encoding"><a href="#编码-encoding" class="headerlink" title="编码-encoding"></a>编码-encoding</h4><p>以下为不同类型的对象以及他们会采用的编码方式：</p><table><thead><tr><th>对象类型</th><th>编码方式</th><th>是否默认 &#x2F; 特殊情况</th></tr></thead><tbody><tr><td>String</td><td>embstr &#x2F; raw &#x2F; int</td><td>embstr 是短字符串优化；int 为整数</td></tr><tr><td>List</td><td>quicklist</td><td>Redis 3.2+ 默认</td></tr><tr><td>Set</td><td>intset &#x2F; hashtable</td><td>小整数集合 → intset</td></tr><tr><td>Hash</td><td>listpack &#x2F; hashtable</td><td>小型哈希 → listpack</td></tr><tr><td>ZSet</td><td>listpack &#x2F; skiplist</td><td>大型集合或范围查询 → skiplist</td></tr></tbody></table><p>通过encoding属性来设定对象的底层编码，而不为某一类型对象使用特定的数据编码，使得redis能在特定情况下设置encoding来提高该情景中的redis性能。</p><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><p>字符串对象底层采用的编码一般为<strong>embstr</strong>和<strong>raw</strong>，其实这两种编码的实现方式原理都是<strong>SDS</strong>。但是，embstr更适合于短字符串，raw则用于长字符串。而一个字符串对象保存的是一个整数值时，ptr类型变为long，编码方式为<strong>int</strong>。<br>区别如下：</p><ul><li><strong>embstr</strong></li></ul><ol><li>一次性分配内存，一次性释放内存。</li><li>对象头和SDS字符串在同一块内存。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 内存结构">[ robj | sds结构 | 字符串内容 ]<br> ↑全在一块 malloc 内存中<br></code></pre></td></tr></table></figure><ul><li><strong>raw</strong></li></ul><ol><li>两次分配内存，两次释放内存。</li><li>对象头和SDS字符串分开，两个指针内存。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 内存结构">[ robj ]     -&gt;     [ sds结构 | 字符串内容 ]<br>（分开 malloc 两块内存）<br></code></pre></td></tr></table></figure><h3 id="列表对象"><a href="#列表对象" class="headerlink" title="列表对象"></a>列表对象</h3><p>从 Redis 3.2 开始，列表对象的底层统一使用<strong>quicklist</strong>编码，取代了老版本的ziplist和linkedlist。</p><blockquote><p>quicklist &#x3D; 多个<strong>ziplist</strong>节点组成的双向链表结构</p></blockquote><p>它结合了 ziplist（紧凑、连续）和 linkedlist（快速插入&#x2F;删除）的优点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs quicklist">[ziplist1] &lt;-&gt; [ziplist2] &lt;-&gt; [ziplist3] ...<br></code></pre></td></tr></table></figure><h3 id="哈希对象"><a href="#哈希对象" class="headerlink" title="哈希对象"></a>哈希对象</h3><p>哈希对象的编码方式为<strong>listpack</strong>或者<strong>hashtable</strong>，listpack用于小型哈希表，而hashtable则用于大型哈希表。</p><p>listpack编码实现的哈希对象原理与ziplist编码相同。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/hashByziplist.png" alt="ziplist编码的哈希对象"></p><p>添加顺序如下：</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/hashByziplist2.png" alt="ziplist编码的哈希对象的底层实现"></p><p>hashtable编码底层使用字典实现哈希对象。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/hashBydict.png" alt="hashtable编码的哈希对象"></p><h3 id="集合对象"><a href="#集合对象" class="headerlink" title="集合对象"></a>集合对象</h3><p>集合对象可以使用<strong>intset</strong>或<strong>hashtable</strong>编码实现。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/set.png" alt="两种编码的集合对象"></p><h3 id="有序集合对象"><a href="#有序集合对象" class="headerlink" title="有序集合对象"></a>有序集合对象</h3><p>有序集合对象编码可以是<strong>listpack</strong>或<strong>skiplist</strong>。</p><p>listpack编码的有序对象使用压缩列表作为底层实现，每个集合元素使用两个紧挨着的节点保存，第一个节点为元素成员，第二个节点为元素分值。<strong>压缩列表内的元素按照分值从小到大进行排列</strong>。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/zsetByzl.png" alt="ziplist编码的有序集合对象"></p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/zlInzset.png" alt="有序集合中的元素"></p><p>skiplist编码的有序集合对象为了保证各个命令的操作性能不下降，所以实际使用了<strong>字典</strong>和<strong>跳表</strong>共同构建。</p><p><img src="/img/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/zsetBysl.png" alt="skiplist编码的有序集合对象"></p>]]></content>
    
    
    <categories>
      
      <category>redis设计与实现读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上传文章</title>
    <link href="/2025/06/20/%E4%B8%8A%E4%BC%A0%E6%96%87%E7%AB%A0/"/>
    <url>/2025/06/20/%E4%B8%8A%E4%BC%A0%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记录上传博客的操作步骤————第一篇文章</p></blockquote><h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2><p>博客网站是借用<strong>github、hexo、fluid</strong>搭建的静态网页，其中github相当于提供服务器服务（github pages），但是只能存放静态网页，所以博客的发布需要作者从本地更新整个网站再上传到github，其他人才能看到。之所以选择这套方案，主要是作者现在作为学生米还是不够多🤣，再者该方案作为笔记系统已经足够满足我的需求了😊。</p><p>所以本地操作基于<strong>hexo</strong>创建一个本地网页，网页语言使用markdown即可。首先进入网站工作目录，终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post 文章名<br></code></pre></td></tr></table></figure><p>该操作会在<code>/source/_posts/</code>目录下生成一个md文件，在该文件中即可编写文章内容。md文件中的图片插入则使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;% asset_img xxx.png title %&#125;<br></code></pre></td></tr></table></figure><p>图片放入该目录下的文章同名目录下。</p><p>写完文章后，使用以下命令更新本地的静态网站：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d<br><span class="hljs-comment"># 使用该命令可以通过https://localhost:4000访问本地网站</span><br>hexo s <br></code></pre></td></tr></table></figure><h2 id="上传github"><a href="#上传github" class="headerlink" title="上传github"></a>上传github</h2><p>可以把文件目录直接push到github，也可以安装<strong>hexo-deployer-git</strong>自动化上传。安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
